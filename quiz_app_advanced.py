"""
üß† PDF Alap√∫ Quiz Alkalmaz√°s - Fejlett Verzi√≥
Kieg√©sz√≠tett funkci√≥kkal: Analytics, Quiz m√≥dok, Neh√©zs√©gi szintek
"""

import streamlit as st
import random
import time
from datetime import datetime
import os
from pathlib import Path
import base64
from topics.foldrajz_complete import FOLDRAJZ_QUESTIONS_COMPLETE as FOLDRAJZ_QUESTIONS
from topics.komolyzene_uj import KOMOLYZENE_QUESTIONS
from topics.tudosok import TUDOSOK_QUESTIONS
from topics.mitologia_all_questions import MITOLOGIA_QUESTIONS_ALL
from topics.haboru_all_questions import HABORU_QUESTIONS_ALL
from topics.kiralyok import KIRALYOK_QUESTIONS
from topics.allatok_balanced import ALLATOK_QUESTIONS_BALANCED
from topics.dramak import DRAMAK_QUESTIONS
from topics.sport_logok import SPORT_LOGOK_QUESTIONS
from topics.zaszlok_all_questions import ZASZLOK_QUESTIONS_ALL
from topics.magyar_zenekarok_uj import MAGYAR_ZENEKAROK_QUESTIONS_UJ
from topics.nemzetkozi_zenekarok_final_fixed_with_real_audio import NEMZETKOZI_ZENEKAROK_QUESTIONS
from topics.idiota_szavak import IDIOTA_SZAVAK_QUESTIONS
from topics.festmenyek import FESTMENY_QUESTIONS
from custom_audio_player import audio_player_with_download
from youtube_audio_mapping import get_youtube_audio_filename_cached, get_youtube_audio_info
from magyar_audio_mapping_uj import MAGYAR_AUDIO_MAPPING_UJ, get_magyar_audio_uj_path
from nemzetkozi_audio_mapping_complete import get_nemzetkozi_audio_path
from quiz_analytics import QuizAnalytics
from quiz_modes import QuizModeManager, QuizMode, DifficultyLevel, QuizModeUI, QuizScoring
from auto_audio_player import auto_audio_player_simple

def get_image_base64(image_path):
    """K√©p konvert√°l√°sa base64 form√°tumra"""
    try:
        with open(image_path, "rb") as image_file:
            encoded_string = base64.b64encode(image_file.read()).decode()
        return encoded_string
    except Exception as e:
        st.error(f"Hiba a k√©p bet√∂lt√©se sor√°n: {e}")
        return ""

# Page config
st.set_page_config(
    page_title="Quiz App - Fejlett Verzi√≥",
    page_icon="üéØ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        text-align: center;
        color: #1f77b4;
        margin-bottom: 2rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }
    .topic-button {
        background-color: #f0f2f6;
        border: 2px solid #e0e0e0;
        border-radius: 10px;
        padding: 1rem;
        margin: 0.5rem;
        text-align: center;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    .topic-button:hover {
        background-color: #e0e0e0;
        border-color: #1f77b4;
    }
    .topic-button.selected {
        background-color: #1f77b4;
        color: white;
        border-color: #1f77b4;
    }
    .quiz-container {
        background-color: white;
        border-radius: 15px;
        padding: 2rem;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        margin: 1rem 0;
    }
    .question-text {
        font-size: 1.5rem;
        font-weight: bold;
        margin-bottom: 1.5rem;
        color: #87CEEB;
    }
    .option-button {
        width: 100%;
        text-align: left;
        padding: 1rem;
        margin: 0.5rem 0;
        border: 2px solid #e0e0e0;
        border-radius: 10px;
        background-color: transparent;
        transition: all 0.3s ease;
    }
    .option-button:hover {
        background-color: #e9ecef;
        border-color: #1f77b4;
    }
    .option-button.selected {
        background-color: #1f77b4;
        color: white;
        border-color: #1f77b4;
    }
    .option-button.correct {
        background-color: #28a745;
        color: white;
        border-color: #28a745;
    }
    .option-button.incorrect {
        background-color: #dc3545;
        color: white;
        border-color: #dc3545;
    }
    .score-display {
        font-size: 1.2rem;
        font-weight: bold;
        text-align: center;
        padding: 1rem;
        background-color: #f8f9fa;
        border-radius: 10px;
        margin: 1rem 0;
        color: #333;
    }
    .summary-box {
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 1.5rem;
        margin: 1rem 0;
        border-left: 4px solid #1f77b4;
        color: #333;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .summary-box h3, .summary-box h4 {
        color: #1f77b4;
        margin-bottom: 0.75rem;
        font-size: 1.1rem;
        font-weight: 600;
    }
    .summary-box p {
        color: #333;
        margin: 0.5rem 0;
        font-size: 1rem;
        line-height: 1.4;
    }
    .summary-box strong {
        color: #1f77b4;
        font-weight: 600;
    }
    .mode-info {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
    }
    .timer-warning {
        background-color: #ffc107;
        color: #333;
        padding: 0.5rem;
        border-radius: 5px;
        text-align: center;
        font-weight: bold;
    }
    .timer-danger {
        background-color: #dc3545;
        color: white;
        padding: 0.5rem;
        border-radius: 5px;
        text-align: center;
        font-weight: bold;
    }
    .image-container {
        display: flex;
        justify-content: center;
        align-items: center;
        margin: 2rem 0;
        padding: 1rem;
        background-color: #f8f9fa;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .image-container img {
        max-width: 100%;
        height: auto;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        transition: transform 0.3s ease;
    }
    .image-container img:hover {
        transform: scale(1.05);
    }
    .image-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.9);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        cursor: pointer;
        backdrop-filter: blur(5px);
    }
    .modal-buttons {
        position: fixed;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        z-index: 1001;
        background-color: rgba(255,255,255,0.9);
        padding: 10px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.3);
    }
    .image-modal img {
        max-width: 90%;
        max-height: 90%;
        object-fit: contain;
        border-radius: 8px;
        box-shadow: 0 8px 16px rgba(0,0,0,0.5);
    }
    .image-caption {
        text-align: center;
        font-style: italic;
        color: #666;
        margin-top: 0.5rem;
        font-size: 0.9rem;
    }
</style>
""", unsafe_allow_html=True)

# Quiz adatok t√©mak√∂r√∂k szerint csoportos√≠tva
QUIZ_DATA_BY_TOPIC = {
    "f√∂ldrajz": FOLDRAJZ_QUESTIONS,
    "komolyzene": KOMOLYZENE_QUESTIONS,
    "magyar_zenekarok": MAGYAR_ZENEKAROK_QUESTIONS_UJ,
    "nemzetkozi_zenekarok": NEMZETKOZI_ZENEKAROK_QUESTIONS,
    "h√°bor√∫k": HABORU_QUESTIONS_ALL,
    "magyar_kir√°lyok": KIRALYOK_QUESTIONS,
    "tud√≥sok": TUDOSOK_QUESTIONS,
    "mitol√≥gia": MITOLOGIA_QUESTIONS_ALL,
    "√°llatok": ALLATOK_QUESTIONS_BALANCED,
    "dr√°m√°k": DRAMAK_QUESTIONS,
    "sport_log√≥k": SPORT_LOGOK_QUESTIONS,
    "z√°szl√≥k": ZASZLOK_QUESTIONS_ALL,
    "idi√≥ta_szavak": IDIOTA_SZAVAK_QUESTIONS,
    "festm√©nyek": FESTMENY_QUESTIONS,
}

# Initialize session state
if 'quiz_state' not in st.session_state:
    st.session_state.quiz_state = 'selection'
    st.session_state.selected_topics = []
    st.session_state.current_question = 0
    st.session_state.score = 0
    st.session_state.answers = []
    st.session_state.quiz_questions = []
    st.session_state.show_image_modal = False
    st.session_state.image_modal_states = {}  # K√ºl√∂n modal √°llapot minden k√©rd√©shez
    st.session_state.quiz_start_time = None
    st.session_state.mode_manager = QuizModeManager()
    st.session_state.analytics = QuizAnalytics()
    st.session_state.question_start_time = None

def reset_quiz():
    """Quiz √°llapot vissza√°ll√≠t√°sa"""
    st.session_state.quiz_state = 'selection'
    st.session_state.selected_topics = []
    st.session_state.current_question = 0
    st.session_state.score = 0
    st.session_state.answers = []
    st.session_state.quiz_questions = []
    st.session_state.quiz_start_time = None
    st.session_state.question_answers = {}
    st.session_state.question_options = {}
    st.session_state.mode_manager = QuizModeManager()
    st.session_state.question_start_time = None
    st.session_state.show_image_modal = False
    st.session_state.image_modal_states = {}
    
    # Checkbox √°llapotok t√∂rl√©se
    topics = {
        "f√∂ldrajz": "üåç F√∂ldrajz",
        "komolyzene": "üéº Komolyzene",
        "magyar_zenekarok": "üéµ Magyar k√∂nny≈±zene",
        "nemzetkozi_zenekarok": "üåç Nemzetk√∂zi zenekarok",
        "festm√©nyek": "üé® Festm√©nyek",
        "h√°bor√∫k": "‚öîÔ∏è H√°bor√∫k",
        "magyar_kir√°lyok": "üëë Magyar kir√°lyok",
        "tud√≥sok": "üî¨ Tud√≥sok",
        "mitol√≥gia": "üèõÔ∏è Mitol√≥gia",
        "√°llatok": "üêæ √Ållatok",
        "dr√°m√°k": "üé≠ Dr√°m√°k",
        "sport_log√≥k": "üèÜ Sport log√≥k",
        "z√°szl√≥k": "üèÅ Z√°szl√≥k",
        "idi√≥ta_szavak": "ü§™ Idi√≥ta szavak",
    }
    
    for topic_key in topics.keys():
        checkbox_key = f"topic_{topic_key}"
        if checkbox_key in st.session_state:
            del st.session_state[checkbox_key]

def get_audio_file_for_question(question, topic):
    """Visszaadja az audio f√°jl el√©r√©si √∫tj√°t a k√©rd√©shez"""
    if topic == "magyar_zenekarok":
        if "original_index" in question:
            try:
                index = int(question["original_index"])
                audio_path = get_magyar_audio_uj_path(index)
                if audio_path and os.path.exists(audio_path):
                    return str(audio_path)
            except Exception as e:
                pass
        return None
    elif topic == "nemzetkozi_zenekarok":
        # Nemzetk√∂zi zenekarok - audio_file vagy original_index alap√∫
        if "audio_file" in question and question["audio_file"]:
            audio_dir = Path(__file__).parent / "audio_files"
            audio_path = audio_dir / question["audio_file"]
            if audio_path.exists():
                return str(audio_path)
        elif "original_index" in question:
            try:
                # Biztosan integer legyen az index
                index = int(question["original_index"])
                audio_path = get_nemzetkozi_audio_path(index)
                if audio_path and audio_path.exists():
                    return str(audio_path)
            except Exception as e:
                print(f"[DEBUG] Hiba az original_index haszn√°lat√°n√°l: {e}")
        elif "spotify_embed" in question:
            # Spotify embed eset√©n pr√≥b√°ljuk meg az original_index alapj√°n tal√°lni az audio f√°jlt
            if "original_index" in question:
                try:
                    # Biztosan integer legyen az index
                    index = int(question["original_index"])
                    audio_path = get_nemzetkozi_audio_path(index)
                    if audio_path and audio_path.exists():
                        return str(audio_path)
                    else:
                        print(f"[DEBUG] Nemzetk√∂zi audio f√°jl nem tal√°lhat√≥ index {index}: {audio_path}")
                except Exception as e:
                    print(f"[DEBUG] Hiba az original_index haszn√°lat√°n√°l: {e}")
            else:
                print(f"[DEBUG] Spotify embed tal√°lhat√≥, de nincs original_index")
            pass
    elif topic == "komolyzene":
        # Komolyzene: original_index alap√∫ mapping haszn√°lata
        if "original_index" in question:
            # √öJ: komolyzene_audio_mapping.get_komolyzene_audio_path haszn√°lata
            from komolyzene_audio_mapping import get_komolyzene_audio_path
            try:
                # Biztosan integer legyen az index
                index = int(question["original_index"])
                audio_path = get_komolyzene_audio_path(index)
                if audio_path and audio_path.exists():
                    return str(audio_path)
            except Exception as e:
                pass
        elif "audio_file" in question:
            # Ha csak audio_file van, pr√≥b√°ljuk az √∫j mapp√°b√≥l
            audio_dir = Path(__file__).parent / "audio_files_komolyzene"
            audio_path = audio_dir / question["audio_file"]
            if audio_path.exists():
                return str(audio_path)
    else:
        # Egy√©b t√©mak√∂r√∂k - youtube_audio_mapping haszn√°lata
        if "original_index" in question:
            try:
                # Biztosan integer legyen az index
                index = int(question["original_index"])
                audio_filename = get_youtube_audio_filename_cached(index, topic)
                if audio_filename:
                    audio_dir = Path(__file__).parent / "audio_files"
                    audio_path = audio_dir / audio_filename
                    if audio_path.exists():
                        return str(audio_path)
            except Exception as e:
                print(f"[DEBUG] Hiba az egy√©b t√©mak√∂r original_index haszn√°lat√°n√°l: {e}")
    return None

def start_quiz():
    """Quiz ind√≠t√°sa"""
    if not st.session_state.selected_topics:
        st.error("K√©rlek v√°lassz ki legal√°bb egy t√©mak√∂r√∂t!")
        return
    
    # V√©gleges k√©rd√©ssz√°m haszn√°lata
    final_question_count = st.session_state.get('final_question_count', 40)
    
    all_questions = []
    total_selected_questions = 0
    invalid_questions = 0
    debug_invalid = []
    
    # Minden t√©mak√∂r kezel√©se egyedi sliders alapj√°n
    for topic in st.session_state.selected_topics:
        if topic in QUIZ_DATA_BY_TOPIC:
            topic_questions = QUIZ_DATA_BY_TOPIC[topic]
            print(f"[DEBUG] {topic} √∂sszes k√©rd√©s: {len(topic_questions)}")
            # Egyedi t√©mak√∂r slider haszn√°lata
            questions_count = st.session_state.get(f'final_{topic}_questions', 0)
            questions_count = min(questions_count, len(topic_questions))
            print(f"[DEBUG] {topic} kiv√°lasztott k√©rd√©ssz√°m: {questions_count}")
            
            if questions_count > 0:
                total_selected_questions += questions_count
                # V√©letlenszer≈± k√©rd√©sek kiv√°laszt√°sa
                selected_indices = random.sample(range(len(topic_questions)), questions_count)
                for idx in selected_indices:
                    question = topic_questions[idx].copy()
                    # Ellen≈ërizz√ºk, hogy a k√©rd√©s rendelkezik-e a sz√ºks√©ges mez≈ëkkel
                    if "options" not in question or "correct" not in question:
                        invalid_questions += 1
                        debug_invalid.append((topic, idx, question))
                        continue
                    question['topic'] = topic
                    # --- Magyar zenekarok: opci√≥k √©s helyes v√°lasz igaz√≠t√°sa ---
                    if topic == "magyar_zenekarok":
                        # A f√°jln√©v alapj√°n keress√ºk meg a mapping index√©t
                        audio_file = question.get("audio_file", "")
                        if audio_file:
                            # Keress√ºk meg a f√°jlt a mappingben
                            mapping_index = None
                            for map_idx, map_fname in MAGYAR_AUDIO_MAPPING_UJ.items():
                                if map_fname == audio_file:
                                    mapping_index = map_idx
                                    break
                            
                            if mapping_index is not None:
                                question['original_index'] = mapping_index
                                # A mappingb≈ël kinyerj√ºk a helyes el≈ëad√≥t
                                mapping_fname = MAGYAR_AUDIO_MAPPING_UJ.get(mapping_index)
                                if mapping_fname:
                                    # El≈ëad√≥ n√©v a f√°jln√©vb≈ël (els≈ë k√©tjegy≈± sz√°m + _ lev√°gva, .mp3 n√©lk√ºl)
                                    artist = mapping_fname.split('_', 1)[-1].replace('.mp3', '').replace('_', ' ')
                                    # Csak akkor adjuk hozz√°, ha nincs m√°r a list√°ban
                                    if artist not in question["options"]:
                                        question["options"].append(artist)
                                    # A helyes v√°lasz index√©t √°ll√≠tjuk be
                                    if artist in question["options"]:
                                        question["correct"] = question["options"].index(artist)
                            else:
                                print(f"[DEBUG] F√°jl nem tal√°lhat√≥ a mappingben: {audio_file}")
                                question['original_index'] = idx  # Fallback
                        else:
                            question['original_index'] = idx  # Fallback
                    else:
                        question['original_index'] = idx
                    all_questions.append(question)
    print(f"[DEBUG] √ñsszes kiv√°lasztott k√©rd√©s (sz≈±r√©s el≈ëtt): {total_selected_questions}")
    if invalid_questions > 0:
        print(f"[DEBUG] {invalid_questions} √©rv√©nytelen k√©rd√©s kihagyva:")
        for topic, idx, q in debug_invalid:
            print(f"  - {topic} [{idx}]: {q.get('question', 'N/A')}")
    
    if not all_questions:
        st.error("Nem tal√°lhat√≥ √©rv√©nyes k√©rd√©s a kiv√°lasztott t√©mak√∂r√∂kben!")
        if invalid_questions > 0:
            st.warning(f"{invalid_questions} √©rv√©nytelen k√©rd√©s kihagyva (hi√°nyz√≥ adatok)")
        return
    
    # K√©rd√©sek kever√©se
    random.shuffle(all_questions)
    
    # V√©gleges k√©rd√©ssz√°m alkalmaz√°sa - csak akkor, ha t√∂bb k√©rd√©s van, mint amit k√©rt√ºnk
    if len(all_questions) > final_question_count:
        all_questions = all_questions[:final_question_count]
    
    # Debug inform√°ci√≥
    st.info(f"Kiv√°lasztott k√©rd√©sek: {len(all_questions)} / {final_question_count} (√∂sszesen: {total_selected_questions})")
    if invalid_questions > 0:
        st.warning(f"{invalid_questions} √©rv√©nytelen k√©rd√©s kihagyva")
    
    st.session_state.quiz_questions = all_questions
    st.session_state.current_question = 0
    st.session_state.score = 0
    st.session_state.answers = []
    st.session_state.quiz_state = 'quiz'
    st.session_state.quiz_start_time = datetime.now()
    st.session_state.question_start_time = datetime.now()
    st.rerun()

def main():
    """F≈ë alkalmaz√°s"""
    # Session state inicializ√°l√°sa
    if 'quiz_state' not in st.session_state:
        st.session_state.quiz_state = 'selection'
    if 'selected_topics' not in st.session_state:
        st.session_state.selected_topics = []
    if 'current_question' not in st.session_state:
        st.session_state.current_question = 0
    if 'score' not in st.session_state:
        st.session_state.score = 0
    if 'answers' not in st.session_state:
        st.session_state.answers = []
    if 'quiz_questions' not in st.session_state:
        st.session_state.quiz_questions = []
    if 'quiz_start_time' not in st.session_state:
        st.session_state.quiz_start_time = None
    if 'question_answers' not in st.session_state:
        st.session_state.question_answers = {}
    if 'question_options' not in st.session_state:
        st.session_state.question_options = {}
    if 'mode_manager' not in st.session_state:
        st.session_state.mode_manager = QuizModeManager()
    if 'question_start_time' not in st.session_state:
        st.session_state.question_start_time = None
    if 'show_image_modal' not in st.session_state:
        st.session_state.show_image_modal = False
    if 'image_modal_states' not in st.session_state:
        st.session_state.image_modal_states = {}
    
    st.markdown('<h1 class="main-header">üéØ Quiz Alkalmaz√°s - Fejlett Verzi√≥</h1>', unsafe_allow_html=True)
    
    # Sidebar navig√°ci√≥
    with st.sidebar:
        st.markdown("## üß≠ Navig√°ci√≥")
        page = st.selectbox(
            "V√°lassz oldalt:",
            ["Quiz", "Keres√©s", "Analytics", "Be√°ll√≠t√°sok"],
            format_func=lambda x: {
                "Quiz": "üéØ Quiz",
                "Keres√©s": "üîç Keres√©s",
                "Analytics": "üìä Analytics", 
                "Be√°ll√≠t√°sok": "‚öôÔ∏è Be√°ll√≠t√°sok"
            }[x]
        )
    
    if page == "Quiz":
        show_quiz_page()
    elif page == "Keres√©s":
        show_search_page()
    elif page == "Analytics":
        show_analytics_page()
    elif page == "Be√°ll√≠t√°sok":
        show_settings_page()

def show_quiz_page():
    """Quiz oldal megjelen√≠t√©se"""
    if st.session_state.quiz_state == 'selection':
        show_topic_selection()
    elif st.session_state.quiz_state == 'quiz':
        show_quiz()
    elif st.session_state.quiz_state == 'results':
        show_results()

def show_search_page():
    """Keres√©si oldal megjelen√≠t√©se"""
    try:
        from search_functionality import display_search_interface
        display_search_interface()
    except ImportError as e:
        st.error(f"Hiba a keres√©si funkci√≥ bet√∂lt√©sekor: {e}")
        st.info("A keres√©si funkci√≥ nem √©rhet≈ë el. Ellen≈ërizd a search_functionality.py f√°jlt.")

def show_topic_selection():
    """T√©mak√∂r kiv√°laszt√°s"""
    st.markdown("## üìö T√©mak√∂r√∂k √©s M√≥d Kiv√°laszt√°sa")
    
    # Quiz m√≥d kiv√°laszt√°s
    selected_mode, selected_difficulty = QuizModeUI.show_mode_selection()
    
    # M√≥d be√°ll√≠t√°sa
    mode_mapping = {
        "norm√°l": QuizMode.NORMAL,
        "id≈ëz√≠tett": QuizMode.TIMED,
        "t√∫l√©l√©s": QuizMode.SURVIVAL,
        "gyakorl√°s": QuizMode.PRACTICE,
        "kih√≠v√°s": QuizMode.CHALLENGE
    }
    
    difficulty_mapping = {
        "k√∂nny≈±": DifficultyLevel.EASY,
        "k√∂zepes": DifficultyLevel.MEDIUM,
        "neh√©z": DifficultyLevel.HARD
    }
    
    st.session_state.mode_manager.set_mode(mode_mapping[selected_mode])
    st.session_state.mode_manager.set_difficulty(difficulty_mapping[selected_difficulty])
    
    # T√©mak√∂r√∂k defini√°l√°sa
    topics = {
        "f√∂ldrajz": "üåç F√∂ldrajz",
        "komolyzene": "üéº Komolyzene",
        "magyar_zenekarok": "üéµ Magyar k√∂nny≈±zene",
        "nemzetkozi_zenekarok": "üåç Nemzetk√∂zi zenekarok",
        "festm√©nyek": "üé® Festm√©nyek",
        "h√°bor√∫k": "‚öîÔ∏è H√°bor√∫k",
        "magyar_kir√°lyok": "üëë Magyar kir√°lyok",
        "tud√≥sok": "üî¨ Tud√≥sok",
        "mitol√≥gia": "üèõÔ∏è Mitol√≥gia",
        "√°llatok": "üêæ √Ållatok",
        "dr√°m√°k": "üé≠ Dr√°m√°k",
        "sport_log√≥k": "üèÜ Sport log√≥k",
        "z√°szl√≥k": "üèÅ Z√°szl√≥k",
        "idi√≥ta_szavak": "ü§™ Idi√≥ta szavak",
    }
    
    # Randomiz√°l√≥ funkci√≥
    st.markdown("### üé≤ Randomiz√°l√≥ Funkci√≥")
    
    # K√©rd√©ssz√°m be√°ll√≠t√°s cs√∫szk√°val
    col1, col2 = st.columns(2)
    with col1:
        random_question_count = st.slider("Randomiz√°l√°shoz haszn√°land√≥ k√©rd√©ssz√°m", 10, 100, 40, key="random_question_count")
    
    with col2:
        random_music_question_count = st.slider("Zenei randomiz√°l√°shoz haszn√°land√≥ k√©rd√©ssz√°m", 5, 50, 20, key="random_music_question_count")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üé≤ Random t√©mak√∂r√∂k kiv√°laszt√°sa (zene n√©lk√ºl)", type="secondary", use_container_width=True):
            # Legal√°bb 5 t√©mak√∂r kiv√°laszt√°sa (zenei t√©mak√∂r√∂k n√©lk√ºl)
            music_topics = ["komolyzene", "magyar_zenekarok", "nemzetkozi_zenekarok"]
            available_topics = [topic for topic in topics.keys() if topic not in music_topics]
            num_topics = random.randint(5, min(8, len(available_topics)))  # 5-8 t√©mak√∂r k√∂z√∂tt
            selected_random_topics = random.sample(available_topics, num_topics)
            
            # K√©rd√©sek eloszt√°sa a kiv√°lasztott t√©mak√∂r√∂k k√∂z√∂tt
            questions_per_topic = random_question_count // num_topics
            remaining_questions = random_question_count % num_topics
            
            # Megl√©v≈ë zenei t√©mak√∂r√∂k megtart√°sa
            existing_music_topics = [topic for topic in st.session_state.selected_topics if topic in music_topics]
            
            # T√©mak√∂r√∂k kiv√°laszt√°sa (zenei + √∫j random)
            st.session_state.selected_topics = existing_music_topics + selected_random_topics
            
            # Checkbox √°llapotok friss√≠t√©se
            for topic_key in topics.keys():
                checkbox_key = f"topic_{topic_key}"
                if topic_key in selected_random_topics or topic_key in existing_music_topics:
                    st.session_state[checkbox_key] = True
                elif topic_key not in music_topics:  # Csak nem-zenei t√©mak√∂r√∂k t√∂rl√©se
                    st.session_state[checkbox_key] = False
            
            # K√©rd√©ssz√°mok be√°ll√≠t√°sa
            for i, topic in enumerate(selected_random_topics):
                topic_questions = questions_per_topic + (1 if i < remaining_questions else 0)
                max_available = len(QUIZ_DATA_BY_TOPIC.get(topic, []))
                topic_questions = min(topic_questions, max_available)
                st.session_state[f'{topic}_questions'] = topic_questions
                # Ne m√≥dos√≠tsuk a final_ √©rt√©keket, ha m√°r l√©trej√∂ttek a slider-ek
                if f'final_{topic}_questions' not in st.session_state:
                    st.session_state[f'final_{topic}_questions'] = topic_questions
            
            # Alap√©rtelmezett √©rt√©kek be√°ll√≠t√°sa
            st.session_state['other_total_questions'] = random_question_count
            st.session_state['music_total_questions'] = random_music_question_count
            
            st.success(f"‚úÖ {num_topics} t√©mak√∂r kiv√°lasztva (zene n√©lk√ºl) + megl√©v≈ë zenei t√©mak√∂r√∂k megtartva, {random_question_count} k√©rd√©s elosztva!")
            st.rerun()
    
    with col2:
        if st.button("üéµ Random zenei t√©mak√∂r√∂k kiv√°laszt√°sa", type="secondary", use_container_width=True):
            # Zenei t√©mak√∂r√∂k kiv√°laszt√°sa
            music_topics = ["komolyzene", "magyar_zenekarok", "nemzetkozi_zenekarok"]
            num_music_topics = random.randint(2, 3)  # 2-3 zenei t√©mak√∂r
            selected_music_topics = random.sample(music_topics, num_music_topics)
            
            # K√©rd√©sek eloszt√°sa a zenei t√©mak√∂r√∂k k√∂z√∂tt
            questions_per_music_topic = random_music_question_count // num_music_topics
            remaining_music_questions = random_music_question_count % num_music_topics
            
            # Megl√©v≈ë nem-zenei t√©mak√∂r√∂k megtart√°sa
            existing_other_topics = [topic for topic in st.session_state.selected_topics if topic not in music_topics]
            
            # T√©mak√∂r√∂k kiv√°laszt√°sa (nem-zenei + √∫j zenei)
            st.session_state.selected_topics = existing_other_topics + selected_music_topics
            
            # Checkbox √°llapotok friss√≠t√©se
            for topic_key in topics.keys():
                checkbox_key = f"topic_{topic_key}"
                if topic_key in selected_music_topics or topic_key in existing_other_topics:
                    st.session_state[checkbox_key] = True
                elif topic_key in music_topics:  # Csak zenei t√©mak√∂r√∂k t√∂rl√©se
                    st.session_state[checkbox_key] = False
            
            # K√©rd√©ssz√°mok be√°ll√≠t√°sa
            for i, topic in enumerate(selected_music_topics):
                topic_questions = questions_per_music_topic + (1 if i < remaining_music_questions else 0)
                max_available = len(QUIZ_DATA_BY_TOPIC.get(topic, []))
                topic_questions = min(topic_questions, max_available)
                st.session_state[f'{topic}_questions'] = topic_questions
                # Ne m√≥dos√≠tsuk a final_ √©rt√©keket, ha m√°r l√©trej√∂ttek a slider-ek
                if f'final_{topic}_questions' not in st.session_state:
                    st.session_state[f'final_{topic}_questions'] = topic_questions
            
            # Alap√©rtelmezett √©rt√©kek be√°ll√≠t√°sa
            st.session_state['music_total_questions'] = random_music_question_count
            
            st.success(f"‚úÖ {num_music_topics} zenei t√©mak√∂r kiv√°lasztva + megl√©v≈ë nem-zenei t√©mak√∂r√∂k megtartva, {random_music_question_count} k√©rd√©s elosztva!")
            st.rerun()
    
    with col3:
        if st.button("üîÑ Reset kiv√°laszt√°s", type="secondary", use_container_width=True):
            st.session_state.selected_topics = []
            # Checkbox √°llapotok t√∂rl√©se
            for topic_key in topics.keys():
                checkbox_key = f"topic_{topic_key}"
                st.session_state[checkbox_key] = False
            st.rerun()
    
    st.markdown("---")
    
    # T√©mak√∂r√∂k kiv√°laszt√°sa
    col1, col2, col3 = st.columns(3)
    
    # Egyenl≈ë eloszt√°s kisz√°m√≠t√°sa a kiv√°lasztott t√©mak√∂r√∂k k√∂z√∂tt
    selected_topics = st.session_state.selected_topics if 'selected_topics' in st.session_state else []
    num_selected = len(selected_topics)
    final_question_count = st.session_state.get('final_question_count', 40)
    fair_share = final_question_count // num_selected if num_selected > 0 else 0
    remainder = final_question_count % num_selected if num_selected > 0 else 0
    fair_distribution = {}
    for i, topic in enumerate(selected_topics):
        fair_distribution[topic] = fair_share + (1 if i < remainder else 0)



    with col1:
        st.markdown("### üéµ Zenei t√©mak√∂r√∂k")
        for topic_key, topic_name in topics.items():
            if "zene" in topic_key or "zenekar" in topic_key:
                # Checkbox √°llapot kezel√©se
                checkbox_key = f"topic_{topic_key}"
                # Alap√©rtelmezetten nincs bejel√∂lve, csak ha m√°r kiv√°lasztva van
                default_checked = topic_key in st.session_state.selected_topics
                is_checked = st.checkbox(topic_name, key=checkbox_key, value=default_checked)
                
                # T√©mak√∂r hozz√°ad√°sa/elt√°vol√≠t√°sa a list√°b√≥l
                if is_checked and topic_key not in st.session_state.selected_topics:
                    st.session_state.selected_topics.append(topic_key)
                elif not is_checked and topic_key in st.session_state.selected_topics:
                    st.session_state.selected_topics.remove(topic_key)
                
                # Egyedi slider k√∂zvetlen√ºl a checkbox alatt
                if topic_key in st.session_state.selected_topics:
                    max_questions = len(QUIZ_DATA_BY_TOPIC.get(topic_key, []))
                    # Alap√©rtelmezett √©rt√©k: 20 zenei t√©mak√∂r√∂kn√©l (n√∂velve 10-r≈ël)
                    default_questions = min(20, max_questions)
                    st.session_state.setdefault(f"final_{topic_key}_questions", default_questions)
                    final_topic_questions = st.slider(
                        f"{topic_name} k√©rd√©sek sz√°ma",
                        min_value=0,
                        max_value=max_questions,
                        key=f"final_{topic_key}_questions"
                    )
    
    with col2:
        st.markdown("### üìö Egy√©b t√©mak√∂r√∂k")
        other_topics_list = [t for t in topics.items() if "zene" not in t[0] and "zenekar" not in t[0]]
        for i, (topic_key, topic_name) in enumerate(other_topics_list):
            if i % 2 == 0:
                # Checkbox √°llapot kezel√©se
                checkbox_key = f"topic_{topic_key}"
                # Alap√©rtelmezetten nincs bejel√∂lve
                is_checked = st.checkbox(topic_name, key=checkbox_key)
                
                # T√©mak√∂r hozz√°ad√°sa/elt√°vol√≠t√°sa a list√°b√≥l
                if is_checked and topic_key not in st.session_state.selected_topics:
                    st.session_state.selected_topics.append(topic_key)
                elif not is_checked and topic_key in st.session_state.selected_topics:
                    st.session_state.selected_topics.remove(topic_key)
                
                # Egyedi slider k√∂zvetlen√ºl a checkbox alatt
                if topic_key in st.session_state.selected_topics:
                    max_questions = len(QUIZ_DATA_BY_TOPIC.get(topic_key, []))
                    # Alap√©rtelmezett √©rt√©k: 20 egy√©b t√©mak√∂r√∂kn√©l
                    default_questions = min(20, max_questions)
                    st.session_state.setdefault(f"final_{topic_key}_questions", default_questions)
                    final_topic_questions = st.slider(
                        f"{topic_name} k√©rd√©sek sz√°ma",
                        min_value=0,
                        max_value=max_questions,
                        key=f"final_{topic_key}_questions"
                    )
    
    with col3:
        st.markdown("### üìö Egy√©b t√©mak√∂r√∂k (folyt.)")
        for i, (topic_key, topic_name) in enumerate(other_topics_list):
            if i % 2 == 1:
                # Checkbox √°llapot kezel√©se
                checkbox_key = f"topic_{topic_key}"
                # Alap√©rtelmezetten nincs bejel√∂lve
                is_checked = st.checkbox(topic_name, key=checkbox_key)
                
                # T√©mak√∂r hozz√°ad√°sa/elt√°vol√≠t√°sa a list√°b√≥l
                if is_checked and topic_key not in st.session_state.selected_topics:
                    st.session_state.selected_topics.append(topic_key)
                elif not is_checked and topic_key in st.session_state.selected_topics:
                    st.session_state.selected_topics.remove(topic_key)
                
                # Egyedi slider k√∂zvetlen√ºl a checkbox alatt
                if topic_key in st.session_state.selected_topics:
                    max_questions = len(QUIZ_DATA_BY_TOPIC.get(topic_key, []))
                    # Alap√©rtelmezett √©rt√©k: 20 egy√©b t√©mak√∂r√∂kn√©l
                    default_questions = min(20, max_questions)
                    st.session_state.setdefault(f"final_{topic_key}_questions", default_questions)
                    final_topic_questions = st.slider(
                        f"{topic_name} k√©rd√©sek sz√°ma",
                        min_value=0,
                        max_value=max_questions,
                        key=f"final_{topic_key}_questions"
                    )
    
    # K√©rd√©ssz√°mok be√°ll√≠t√°sa
    if st.session_state.selected_topics:
        st.markdown("### ‚öôÔ∏è K√©rd√©ssz√°mok be√°ll√≠t√°sa")
        
        music_topics = [t for t in st.session_state.selected_topics if "zene" in t or "zenekar" in t]
        other_topics = [t for t in st.session_state.selected_topics if "zene" not in t and "zenekar" not in t]
        
        if music_topics:
            st.markdown("#### üéµ Zenei k√©rd√©sek be√°ll√≠t√°sai")
            # √ñsszes zenei k√©rd√©s sz√°m√°nak kisz√°m√≠t√°sa
            total_music_questions = sum(len(QUIZ_DATA_BY_TOPIC.get(topic, [])) for topic in music_topics)
            
            # Jelenlegi zenei k√©rd√©sek √∂sszege az egyedi sliders alapj√°n
            current_music_total = sum(st.session_state.get(f'final_{topic}_questions', 0) for topic in music_topics)
            
            col1, col2 = st.columns(2)
            with col1:
                music_total_questions = st.slider("√ñsszes zenei k√©rd√©s sz√°ma", 1, total_music_questions, current_music_total, key="music_total_questions")
            with col2:
                music_auto_distribute = st.checkbox("Automatikus eloszt√°s a zenei t√©mak√∂r√∂k k√∂z√∂tt", True, key="music_auto_distribute")
            
            if not music_auto_distribute:
                st.markdown("##### Manu√°lis eloszt√°s:")
                for topic in music_topics:
                    topic_name = topics.get(topic, topic)
                    if topic == "magyar_zenekarok":
                        max_questions = len(MAGYAR_AUDIO_MAPPING_UJ)
                    else:
                        max_questions = len(QUIZ_DATA_BY_TOPIC.get(topic, []))
                    questions_count = st.slider(f"{topic_name} k√©rd√©sek sz√°ma", 0, max_questions, key=f"{topic}_questions")
        
        if other_topics:
            st.markdown("#### üìö Egy√©b t√©mak√∂r√∂k k√©rd√©ssz√°mai")
            
            # Automatikus eloszt√°s egy√©b t√©mak√∂r√∂k k√∂z√∂tt
            col1, col2 = st.columns(2)
            with col1:
                other_total_questions = st.slider("√ñsszes egy√©b k√©rd√©s sz√°ma", 1, 200, key="other_total_questions")
            
            with col2:
                other_auto_distribute = st.checkbox("Automatikus eloszt√°s az egy√©b t√©mak√∂r√∂k k√∂z√∂tt", True, key="other_auto_distribute")
            
            if not other_auto_distribute:
                st.markdown("##### Manu√°lis eloszt√°s:")
                cols = st.columns(3)
                for i, topic in enumerate(other_topics):
                    topic_name = topics.get(topic, topic)
                    max_questions = len(QUIZ_DATA_BY_TOPIC.get(topic, []))
                    with cols[i % 3]:
                        questions_count = st.slider(f"{topic_name} k√©rd√©sek sz√°ma", 0, max_questions, key=f"{topic}_questions")
        

    
    # Quiz ind√≠t√°sa
    if st.session_state.selected_topics:
        st.markdown("### üéØ V√©gleges K√©rd√©ssz√°m Be√°ll√≠t√°sa")
        
        # √ñsszes el√©rhet≈ë k√©rd√©s sz√°m√°nak kisz√°m√≠t√°sa
        total_available_questions = 0
        music_questions = 0
        other_questions = 0
        
        for topic in st.session_state.selected_topics:
            topic_questions = len(QUIZ_DATA_BY_TOPIC.get(topic, []))
            if "zene" in topic or "zenekar" in topic:
                music_questions += topic_questions
            else:
                other_questions += topic_questions
            total_available_questions += topic_questions
        
        # Jelenlegi be√°ll√≠tott k√©rd√©ssz√°mok √∂sszegz√©se az egyedi sliders alapj√°n
        current_total = 0
        for topic in st.session_state.selected_topics:
            topic_questions = st.session_state.get(f'final_{topic}_questions', 0)
            current_total += topic_questions
        
        # V√©gleges k√©rd√©ssz√°m automatikusan a cs√∫szk√°k √∂sszege (nem m√≥dos√≠that√≥)
        final_question_count = current_total
        
        # Inform√°ci√≥k megjelen√≠t√©se
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.info(f"üéµ Zenei k√©rd√©sek: {music_questions}")
        with col2:
            st.info(f"üìö Egy√©b k√©rd√©sek: {other_questions}")
        with col3:
            st.info(f"üìä √ñsszes el√©rhet≈ë: {total_available_questions}")
        with col4:
            st.success(f"üéØ V√©gleges k√©rd√©ssz√°m: {final_question_count}")
        
        # Quiz ind√≠t√°s gomb
        if st.button("üöÄ Quiz ind√≠t√°sa", type="primary", use_container_width=True):
            # V√©gleges k√©rd√©ssz√°m be√°ll√≠t√°sa - csak akkor, ha m√©g nincs be√°ll√≠tva
            if 'final_question_count' not in st.session_state:
                st.session_state.final_question_count = final_question_count
            start_quiz()

def show_quiz():
    """Quiz megjelen√≠t√©se"""
    if st.session_state.current_question >= len(st.session_state.quiz_questions):
        st.session_state.quiz_state = 'results'
        st.rerun()
        return
    
    question = st.session_state.quiz_questions[st.session_state.current_question]
    topic = question.get('topic', 'unknown')
    
    # Extra biztons√°gi ellen≈ërz√©s - ha a k√©rd√©s √©rv√©nytelen, ugorjunk a k√∂vetkez≈ëre
    if "options" not in question or "correct" not in question:
        st.warning(f"√ârv√©nytelen k√©rd√©s kihagyva: {question.get('question', 'Ismeretlen')}")
        st.session_state.current_question += 1
        if st.session_state.current_question >= len(st.session_state.quiz_questions):
            st.session_state.quiz_state = 'results'
            st.rerun()
        else:
            st.rerun()
        return
    
    # Navig√°ci√≥s gombok
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col1:
        if st.session_state.current_question > 0:
            if st.button("‚¨ÖÔ∏è El≈ëz≈ë", key=f"prev_{st.session_state.current_question}"):
                st.session_state.current_question -= 1
                st.rerun()
    
    with col2:
        # K√∂zponti √ºres t√©r a navig√°ci√≥s gombok k√∂z√∂tt
        st.markdown("<div style='text-align: center; padding: 10px;'></div>", unsafe_allow_html=True)
    
    with col3:
        if st.session_state.current_question < len(st.session_state.quiz_questions) - 1:
            if st.button("K√∂vetkez≈ë ‚û°Ô∏è", key=f"next_{st.session_state.current_question}"):
                st.session_state.current_question += 1
                st.rerun()
    
    # Progress bar
    progress = (st.session_state.current_question + 1) / len(st.session_state.quiz_questions)
    st.progress(progress, text=f"Halad√°s: {st.session_state.current_question + 1}/{len(st.session_state.quiz_questions)}")
    
    # Pontsz√°m √©s k√©rd√©s sorsz√°m k√ºl√∂n mez≈ëkben, 50-50% sz√©less√©g
    col1, col2 = st.columns(2)
    
    with col1:
        # Pontsz√°m mez≈ë
        st.markdown(f"""
        <div style='text-align: center; padding: 15px; background: linear-gradient(135deg, #ff6b6b, #ee5a24); border-radius: 15px; border: 3px solid #d32f2f; margin: 20px 0; box-shadow: 0 4px 8px rgba(0,0,0,0.2);'>
            <div style='font-size: 16px; color: white; font-weight: bold; margin-bottom: 8px; text-shadow: 1px 1px 2px rgba(0,0,0,0.3);'>üéØ PONTSZ√ÅM</div>
            <div style='font-size: 32px; color: white; font-weight: bold; text-shadow: 2px 2px 4px rgba(0,0,0,0.3);'>{st.session_state.score}</div>
            <div style='font-size: 14px; color: rgba(255,255,255,0.9); margin-top: 5px;'>{(st.session_state.score / len(st.session_state.quiz_questions) * 100):.1f}%</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        # K√©rd√©s sorsz√°m mez≈ë
        st.markdown(f"""
        <div style='text-align: center; padding: 15px; background: linear-gradient(135deg, #4CAF50, #45a049); border-radius: 15px; border: 3px solid #2E7D32; margin: 20px 0; box-shadow: 0 4px 8px rgba(0,0,0,0.2);'>
            <div style='font-size: 16px; color: white; font-weight: bold; margin-bottom: 8px; text-shadow: 1px 1px 2px rgba(0,0,0,0.3);'>üìù K√âRD√âS</div>
            <div style='font-size: 32px; color: white; font-weight: bold; text-shadow: 2px 2px 4px rgba(0,0,0,0.3);'>{st.session_state.current_question + 1}</div>
            <div style='font-size: 14px; color: rgba(255,255,255,0.9); margin-top: 5px;'>/ {len(st.session_state.quiz_questions)}</div>
        </div>
        """, unsafe_allow_html=True)
    
    # Egy√©b metrik√°k megjelen√≠t√©se
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Sz√°zal√©k", f"{(st.session_state.score / len(st.session_state.quiz_questions) * 100):.1f}%")
    
    with col2:
        # Jelenlegi streak √©s legmagasabb streak egy√ºtt
        current_streak = st.session_state.mode_manager.streak
        max_streak = st.session_state.mode_manager.max_streak
        streak_text = f"{current_streak} ({max_streak})"
        st.metric("Streak", streak_text)
    
    with col3:
        # M√≥d √©s neh√©zs√©gi szint egy√ºtt megjelen√≠t√©se
        mode_text = st.session_state.mode_manager.current_mode.value
        
        # M√≥d nevek magyarul
        mode_names = {
            "normal": "norm√°l",
            "timed": "id≈ëz√≠tett",
            "survival": "t√∫l√©l√©s",
            "practice": "gyakorl√°s",
            "challenge": "kih√≠v√°s"
        }
        mode_name = mode_names.get(mode_text, mode_text)
        
        # Neh√©zs√©gi szint ikonok - string √©rt√©kekkel
        difficulty_icons = {
            "easy": "üü¢",
            "medium": "üü°", 
            "hard": "üî¥"
        }
        current_difficulty_value = st.session_state.mode_manager.current_difficulty.value
        difficulty_icon = difficulty_icons.get(current_difficulty_value, "‚ö™")
        
        # Neh√©zs√©gi szint sz√∂vege - string √©rt√©kekkel
        difficulty_names = {
            "easy": "k√∂nny≈±",
            "medium": "k√∂zepes", 
            "hard": "neh√©z"
        }
        difficulty_name = difficulty_names.get(current_difficulty_value, "Ismeretlen")
        
        # M√≥d √©s neh√©zs√©gi szint egy√ºtt
        combined_text = f"{mode_name} {difficulty_icon} {difficulty_name}"
        st.metric("M√≥d", combined_text)
        
        # √âletek megjelen√≠t√©se k√ºl√∂n sorban, ha van
        if st.session_state.mode_manager.lives is not None:
            st.markdown(f"<div style='text-align: center; font-size: 14px; color: #666; margin-top: -10px;'>√âletek: {st.session_state.mode_manager.lives}</div>", unsafe_allow_html=True)
    
    # Id≈ëz√≠t≈ë (ha van)
    if st.session_state.mode_manager.time_limit:
        time_elapsed = (datetime.now() - st.session_state.question_start_time).total_seconds()
        time_remaining = max(0, st.session_state.mode_manager.time_limit - time_elapsed)
        
        if time_remaining <= 0:
            handle_time_up()
            return
        
        # Id≈ëz√≠t≈ë megjelen√≠t√©se
        st.markdown(f"<div style='text-align: center; font-size: 16px; color: {'red' if time_remaining < 10 else 'orange' if time_remaining < 30 else 'green'};'>"
                   f"‚è±Ô∏è H√°tral√©v≈ë id≈ë: {time_remaining:.1f} m√°sodperc</div>", unsafe_allow_html=True)
    
    # K√©rd√©s megjelen√≠t√©se
    st.markdown('<div class="question-container">', unsafe_allow_html=True)
    
    # K√©rd√©s sz√∂vege
    question_text = question.get("question", "Ismeretlen k√©rd√©s")
    st.markdown(f"<div class='question-text'>{question_text}</div>", unsafe_allow_html=True)
    
    # Audio, Spotify embed vagy k√©p megjelen√≠t√©se
    audio_file = get_audio_file_for_question(question, topic)
    if topic == "nemzetkozi_zenekarok" or topic == "magyar_zenekarok":
        # Minden zenei k√©rd√©sn√©l megpr√≥b√°ljuk megjelen√≠teni az audio playert
        if audio_file and os.path.exists(audio_file):
            try:
                abs_path = os.path.abspath(audio_file)
                st.audio(abs_path, format="audio/mp3")
            except Exception as e:
                st.error(f"Audio f√°jl lej√°tsz√°si hiba: {e}")
        else:
            st.warning("Audio f√°jl nem tal√°lhat√≥")
    else:
        # Eredeti logika m√°s t√©mak√∂r√∂kre
        if "audio_file" in question and question["audio_file"]:
            if audio_file and os.path.exists(audio_file):
                try:
                    abs_path = os.path.abspath(audio_file)
                    st.audio(abs_path, format="audio/mp3")
                except Exception as e:
                    st.error(f"Audio f√°jl lej√°tsz√°si hiba: {e}")
            else:
                st.warning("Audio f√°jl nem tal√°lhat√≥")
    

    
    # Log√≥ vagy festm√©ny k√©p megjelen√≠t√©se
    if "logo_path" in question and question["logo_path"]:
        logo_path = question["logo_path"]
        
        # Z√°szl√≥ k√©pek √∫tvonal jav√≠t√°sa
        if logo_path.startswith("data/flags/"):
            # Streamlit Cloud √©s lok√°lis k√∂rnyezet kompatibilit√°s
            # El≈ësz√∂r pr√≥b√°ljuk meg a jelenlegi munkak√∂nyvt√°rb√≥l (Streamlit Cloud)
            if os.path.exists(logo_path):
                pass  # M√°r j√≥ az √∫tvonal
            else:
                # Ha nem tal√°lhat√≥, pr√≥b√°ljuk meg a quiz_app_advanced.py f√°jl hely√©t≈ël
                current_dir = os.path.dirname(os.path.abspath(__file__))
                logo_path = os.path.join(current_dir, logo_path)
        
        if os.path.exists(logo_path):
            # Log√≥ k√∂z√©pre poz√≠cion√°l√°sa
            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                st.image(logo_path, width=400)
        else:
            st.warning(f"Log√≥ f√°jl nem tal√°lhat√≥: {logo_path}")
    
    # Festm√©ny k√©p megjelen√≠t√©se
    elif "image_file" in question and question["image_file"]:
        image_file = question["image_file"]
        
        # Festm√©ny k√©pek √∫tvonal jav√≠t√°sa
        if not image_file.startswith("/"):
            image_path = os.path.join("festm√©ny_k√©pek", image_file)
        else:
            image_path = image_file
        
        if os.path.exists(image_path):
            # Ha nagy√≠tott √°llapotban vagyunk, nagyobb k√©pet jelen√≠t√ºnk meg
            if st.session_state.image_modal_states.get(st.session_state.current_question, False):
                # Nagy√≠tott k√©p megjelen√≠t√©se - nagyobb m√©rethez igaz√≠tott oszlopok
                col1, col2, col3 = st.columns([1, 4, 1])
                with col2:
                    # Csak a festm√©ny c√≠m√©t jelen√≠tj√ºk meg (fest≈ë n√©v n√©lk√ºl)
                    caption = question.get("explanation", "")
                    if " - " in caption:
                        title_only = caption.split(" - ")[0]
                        st.image(image_path, width=800, caption=title_only)
                    else:
                        st.image(image_path, width=800, caption=caption)
                    
                    # Bez√°r√°s gomb
                    if st.button("‚ùå K√©p bez√°r√°sa", key=f"close_modal_{st.session_state.current_question}", type="primary", use_container_width=True):
                        st.session_state.image_modal_states[st.session_state.current_question] = False
                        st.rerun()
                    
                    # Automatikus bez√°r√°s 30 m√°sodperc ut√°n
                    st.info("üí° Tipp: A modal automatikusan bez√°r√≥dik 30 m√°sodperc m√∫lva!")
                    
                    # Automatikus bez√°r√°s id≈ëz√≠t≈ë
                    modal_time_key = f"modal_start_time_{st.session_state.current_question}"
                    if modal_time_key not in st.session_state:
                        st.session_state[modal_time_key] = time.time()
                    
                    elapsed_time = time.time() - st.session_state[modal_time_key]
                    if elapsed_time > 30:  # 30 m√°sodperc
                        st.session_state.image_modal_states[st.session_state.current_question] = False
                        st.session_state[modal_time_key] = None
                        st.rerun()
            else:
                # Eredeti k√©p megjelen√≠t√©se - eredeti m√©rethez igaz√≠tott oszlopok
                col1, col2, col3 = st.columns([1, 2, 1])
                with col2:
                    st.markdown("""
                    <div class="image-container">
                        <img src="data:image/jpeg;base64,{}" alt="Festm√©ny" style="width: 100%; max-width: 400px; height: auto;">
                    </div>
                    """.format(get_image_base64(image_path)), unsafe_allow_html=True)
                    
                    # K√©p felirat - csak a festm√©ny c√≠me
                    caption = question.get("explanation", "")
                    if caption:
                        # Csak a festm√©ny c√≠m√©t jelen√≠tj√ºk meg (fest≈ë n√©v n√©lk√ºl)
                        if " - " in caption:
                            title_only = caption.split(" - ")[0]
                            st.markdown(f'<div class="image-caption">{title_only}</div>', unsafe_allow_html=True)
                        else:
                            st.markdown(f'<div class="image-caption">{caption}</div>', unsafe_allow_html=True)
                    
                    # Nagy√≠t√°s gomb
                    if st.button("üîç K√©p nagy√≠t√°sa", key=f"zoom_{st.session_state.current_question}"):
                        st.session_state.image_modal_states[st.session_state.current_question] = True
                        st.rerun()
        else:
            st.warning(f"Festm√©ny k√©p nem tal√°lhat√≥: {image_path}")
    
    # Session state inicializ√°l√°sa
    if 'question_answers' not in st.session_state:
        st.session_state.question_answers = {}
    if 'question_options' not in st.session_state:
        st.session_state.question_options = {}
    
    # V√°laszlehet≈ës√©gek randomiz√°l√°sa - robusztus hibakezel√©ssel
    if st.session_state.current_question not in st.session_state.question_options:
        try:
            # Minden hozz√°f√©r√©st a try blokkon bel√ºl v√©gez√ºnk
            options = question["options"].copy()
            # Biztosan integer legyen a correct index
            correct_index = int(question["correct"])
            correct_answer = options[correct_index]
            random.shuffle(options)
            new_correct_index = options.index(correct_answer)
            st.session_state.question_options[st.session_state.current_question] = {
                'options': options,
                'correct_index': new_correct_index
            }
        except (KeyError, IndexError, ValueError, TypeError) as e:
            st.error(f"Hib√°s k√©rd√©s adatok: {e}. K√©rd√©s: {question.get('question', 'Ismeretlen')}")
            # Automatikusan folytatjuk a k√∂vetkez≈ë k√©rd√©ssel
            st.session_state.current_question += 1
            if st.session_state.current_question >= len(st.session_state.quiz_questions):
                st.session_state.quiz_state = 'results'
                st.rerun()
            else:
                st.rerun()
            return
    
    # Extra biztons√°gi ellen≈ërz√©s az options_data el√©r√©se el≈ëtt
    if st.session_state.current_question not in st.session_state.question_options:
        st.error("Hib√°s k√©rd√©s adatok - automatikus folytat√°s")
        st.session_state.current_question += 1
        if st.session_state.current_question >= len(st.session_state.quiz_questions):
            st.session_state.quiz_state = 'results'
            st.rerun()
        else:
            st.rerun()
        return
    
    options_data = st.session_state.question_options[st.session_state.current_question]
    options = options_data['options']
    new_correct_index = options_data['correct_index']
    
    # V√°lasz megjelen√≠t√©se
    selected_answer = st.session_state.question_answers.get(st.session_state.current_question)
    
    # Ha m√°r v√°laszoltunk, mutassuk meg az eredm√©nyt
    if selected_answer is not None:
        is_correct = selected_answer == new_correct_index
        # --- Helyes v√°lasz gomb (K√∂nny≈± m√≥dban) ---
        difficulty = st.session_state.mode_manager.current_difficulty
        if difficulty == DifficultyLevel.EASY and new_correct_index < len(options):
            st.markdown(f"""
                            <div style=\"position: fixed; bottom: 40px; right: 20px; z-index: 1000;\">
                <div class=\"rotated-answer\">
                    <button style=\"background-color: #28a745; color: white; border: none; border-radius: 8px; padding: 10px 15px; font-size: 16px; cursor: pointer; box-shadow: 0 2px 4px rgba(0,0,0,0.3);\">
                        {options[new_correct_index]}
                    </button>
                </div>
            </div>
            """, unsafe_allow_html=True)
    else:
        # K√©rd√©s t√≠pus √©s neh√©zs√©gi szint alap√∫ v√°lasz megjelen√≠t√©s
        difficulty = st.session_state.mode_manager.current_difficulty
        question_type = question.get("question_type", "multiple_choice")
        
        # Idi√≥ta szavak k√©rd√©sek vagy neh√©z m√≥d: sz√∂veges bevitel
        if question_type == "text_input" or difficulty == DifficultyLevel.HARD:
            # Sz√∂veges bevitel m√≥d
            st.markdown("### üí¨ √çrd be a v√°laszod:")
            
            # Idi√≥ta szavak k√©rd√©sekn√©l a correct_answer mez≈ët haszn√°ljuk
            if question_type == "text_input":
                correct_answer = question.get("correct_answer", "").lower().strip()
                user_answer = st.text_input("V√°lasz:", key=f"text_input_{st.session_state.current_question}")
                
                if st.button("‚úÖ V√°lasz bek√ºld√©se", key=f"submit_{st.session_state.current_question}", use_container_width=True):
                    if user_answer:
                        # V√°lasz ellen≈ërz√©se (case-insensitive)
                        user_answer_clean = user_answer.lower().strip()
                        is_correct = user_answer_clean == correct_answer
                        
                        if is_correct:
                            st.session_state.score += 1
                        
                        # V√°lasz ment√©se
                        st.session_state.question_answers[st.session_state.current_question] = user_answer
                        st.session_state.answers.append({
                            'question': question.get("question", "Ismeretlen k√©rd√©s"),
                            'selected': user_answer,
                            'correct': question.get('correct_answer', ''),
                            'options': [],
                            'is_correct': is_correct,
                            'time_taken': (datetime.now() - st.session_state.question_start_time).total_seconds()
                        })
                        
                        # Streak friss√≠t√©se
                        st.session_state.mode_manager.update_streak(is_correct)
                        
                        # K√∂vetkez≈ë k√©rd√©s
                        if st.session_state.current_question < len(st.session_state.quiz_questions) - 1:
                            st.session_state.current_question += 1
                            st.session_state.question_start_time = datetime.now()
                            st.rerun()
                        else:
                            st.session_state.quiz_state = 'results'
                            st.rerun()
                    else:
                        st.warning("K√©rlek, √≠rj be egy v√°laszt!")
            else:
                # Neh√©z m√≥d: feleletv√°laszt√≥s k√©rd√©sek sz√∂veges bevitellel
                user_answer = st.text_input("V√°lasz:", key=f"text_input_{st.session_state.current_question}")
                
                if st.button("‚úÖ V√°lasz bek√ºld√©se", key=f"submit_{st.session_state.current_question}", use_container_width=True):
                    if user_answer:
                        # V√°lasz ellen≈ërz√©se (case-insensitive)
                        correct_answer = options[new_correct_index].lower().strip()
                        user_answer_clean = user_answer.lower().strip()
                        is_correct = user_answer_clean == correct_answer
                        
                        if is_correct:
                            st.session_state.score += 1
                        
                        # V√°lasz ment√©se
                        st.session_state.question_answers[st.session_state.current_question] = user_answer
                        st.session_state.answers.append({
                            'question': question.get("question", "Ismeretlen k√©rd√©s"),
                            'selected': user_answer,
                            'correct': options[new_correct_index],
                            'options': options,
                            'is_correct': is_correct,
                            'time_taken': (datetime.now() - st.session_state.question_start_time).total_seconds()
                        })
                        
                        # Streak friss√≠t√©se
                        st.session_state.mode_manager.update_streak(is_correct)
                        
                        # K√∂vetkez≈ë k√©rd√©s
                        if st.session_state.current_question < len(st.session_state.quiz_questions) - 1:
                            st.session_state.current_question += 1
                            st.session_state.question_start_time = datetime.now()
                            st.rerun()
                        else:
                            st.session_state.quiz_state = 'results'
                            st.rerun()
                    else:
                        st.warning("K√©rlek, √≠rj be egy v√°laszt!")
        
        else:
            # K√∂nny≈± √©s K√∂zepes m√≥d: feleletv√°laszt√≥s
            # CSS st√≠lus a nagyobb bet≈±m√©rethez
            st.markdown("""
            <style>
            .big-answer-button {
                font-size: 24px !important;
                padding: 20px !important;
                margin: 10px 0 !important;
                height: auto !important;
                min-height: 60px !important;
            }
            .rotated-answer {
                transform: rotate(180deg);
                display: inline-block;
            }
            /* Streamlit gombok nagyobb√≠t√°sa */
            .stButton > button {
                font-size: 24px !important;
                padding: 20px !important;
                height: auto !important;
                min-height: 60px !important;
                line-height: 1.5 !important;
            }
            
            /* V√°lasz visszajelz√©s st√≠lusok */
            .correct-answer {
                background-color: #28a745 !important;
                color: white !important;
                border: 3px solid #28a745 !important;
            }
            
            .incorrect-answer {
                background-color: #dc3545 !important;
                color: white !important;
                border: 3px solid #dc3545 !important;
            }
            

            </style>
            """, unsafe_allow_html=True)
            
            # V√°lasz √°llapot ellen≈ërz√©se
            answer_state = getattr(st.session_state, 'answer_state', None)
            show_answer_feedback = False
            if answer_state and (time.time() - answer_state['timestamp']) < 2.0:
                show_answer_feedback = True
            
            # V√°laszlehet≈ës√©gek elrendez√©se
            col1, col2 = st.columns(2)
            
            # Els≈ë sor: 2 v√°laszlehet≈ës√©g
            with col1:
                for i in range(0, min(2, len(options))):
                    option = options[i]
                    
                    # CSS oszt√°ly meghat√°roz√°sa v√°lasz √°llapot alapj√°n
                    button_class = ""
                    if show_answer_feedback:
                        if i == answer_state['selected_index']:
                            if answer_state['is_correct']:
                                button_class = "correct-answer"
                            else:
                                button_class = "incorrect-answer"
                        elif i == answer_state['correct_index']:
                            button_class = "correct-answer"
                    
                    if st.button(option, key=f"option_{st.session_state.current_question}_{i}", 
                               use_container_width=True, help="V√°laszlehet≈ës√©g"):
                        if selected_answer is None:
                            handle_answer(i, new_correct_index, options, question)
                            st.rerun()
            
            with col2:
                for i in range(2, min(4, len(options))):
                    option = options[i]
                    
                    # CSS oszt√°ly meghat√°roz√°sa v√°lasz √°llapot alapj√°n
                    button_class = ""
                    if show_answer_feedback:
                        if i == answer_state['selected_index']:
                            if answer_state['is_correct']:
                                button_class = "correct-answer"
                            else:
                                button_class = "incorrect-answer"
                        elif i == answer_state['correct_index']:
                            button_class = "correct-answer"
                    
                    if st.button(option, key=f"option_{st.session_state.current_question}_{i}", 
                               use_container_width=True, help="V√°laszlehet≈ës√©g"):
                        if selected_answer is None:
                            handle_answer(i, new_correct_index, options, question)
                            st.rerun()
            
            # Helyes v√°lasz megjelen√≠t√©se (csak K√∂nny≈± m√≥dban)
            if difficulty == DifficultyLevel.EASY and new_correct_index < len(options):
                st.markdown(f"""
                <div style="position: fixed; bottom: 40px; right: 20px; z-index: 1000;">
                    <div class="rotated-answer">
                        <button style="background-color: #28a745; color: white; border: none; border-radius: 8px; padding: 10px 15px; font-size: 16px; cursor: pointer; box-shadow: 0 2px 4px rgba(0,0,0,0.3);">
                            {options[new_correct_index]}
                        </button>
                    </div>
                </div>
                """, unsafe_allow_html=True)
            
            # Automatikus k√∂vetkez≈ë k√©rd√©sre l√©p√©s 2 m√°sodperc ut√°n
            if show_answer_feedback:
                if st.session_state.quiz_state != 'results':
                    st.session_state.current_question += 1
                    st.session_state.question_start_time = datetime.now()
                    st.session_state.answer_state = None
                    st.rerun()
                else:
                    # Ha ez az utols√≥ k√©rd√©s, akkor t√∂r√∂lj√ºk a v√°lasz √°llapotot
                    st.session_state.answer_state = None
            
            # Automatikus v√°lasz bek√ºld√©s (opcion√°lis)
            if st.button("üòä J√≥ napom van!", key=f"auto_answer_{st.session_state.current_question}", use_container_width=True):
                # V√©letlenszer≈± v√°lasz kiv√°laszt√°sa
                random_answer = random.randint(0, len(options) - 1)
                handle_answer(random_answer, new_correct_index, options, question)
                st.rerun()
    
    # Kv√≠z √∫jraind√≠t√°s gomb minden k√©rd√©shez (a v√°laszlehet≈ës√©gek ut√°n)
    st.markdown("---")
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        if st.button("üîÑ Kv√≠z √∫jraind√≠t√°sa", key=f"restart_{st.session_state.current_question}", use_container_width=True):
            reset_quiz()
            st.rerun()
    
    st.markdown('</div>', unsafe_allow_html=True)

def handle_answer(selected_index, correct_index, options, question):
    """V√°lasz kezel√©se"""
    is_correct = selected_index == correct_index
    
    # Pontsz√°m friss√≠t√©se
    if is_correct:
        st.session_state.score += 1
    
    # Streak friss√≠t√©se
    st.session_state.mode_manager.update_streak(is_correct)
    
    # √âlet elveszt√©se (Survival m√≥d)
    if not is_correct and st.session_state.mode_manager.lives is not None:
        if not st.session_state.mode_manager.lose_life():
            # Nincs t√∂bb √©let - j√°t√©k v√©ge
            st.session_state.quiz_state = 'results'
            st.rerun()
            return
    
    # V√°lasz ment√©se
    st.session_state.question_answers[st.session_state.current_question] = selected_index
    st.session_state.answers.append({
        'question': question.get("question", "Ismeretlen k√©rd√©s"),
        'selected': selected_index,
        'correct': correct_index,
        'options': options,
        'is_correct': is_correct,
        'time_taken': (datetime.now() - st.session_state.question_start_time).total_seconds()
    })
    
    # V√°lasz √°llapot be√°ll√≠t√°sa 2 m√°sodpercre
    st.session_state.answer_state = {
        'selected_index': selected_index,
        'correct_index': correct_index,
        'is_correct': is_correct,
        'timestamp': time.time()
    }
    
    # Ne h√≠vjuk meg a st.rerun()-t itt, hagyjuk, hogy a show_quiz() kezelje a k√∂vetkez≈ë k√©rd√©st

def handle_time_up():
    """Id≈ë lej√°rt kezel√©se"""
    question = st.session_state.quiz_questions[st.session_state.current_question]
    
    # Ellen≈ërizz√ºk, hogy van-e options_data
    if st.session_state.current_question not in st.session_state.question_options:
        # Ha nincs options_data, automatikusan rossz v√°lasz
        st.session_state.question_answers[st.session_state.current_question] = -1
        st.session_state.answers.append({
            'question': question.get("question", "Ismeretlen k√©rd√©s"),
            'selected': -1,
            'correct': -1,
            'options': [],
            'is_correct': False,
            'time_taken': st.session_state.mode_manager.time_limit
        })
    else:
        options_data = st.session_state.question_options[st.session_state.current_question]
        
        # Automatikusan rossz v√°lasz
        st.session_state.question_answers[st.session_state.current_question] = -1
        st.session_state.answers.append({
            'question': question["question"],
            'selected': -1,
            'correct': options_data['correct_index'],
            'options': options_data['options'],
            'is_correct': False,
            'time_taken': st.session_state.mode_manager.time_limit
        })
    
    # Streak reset
    st.session_state.mode_manager.update_streak(False)
    
    # √âlet elveszt√©se (ha van)
    if st.session_state.mode_manager.lives is not None:
        if not st.session_state.mode_manager.lose_life():
            st.session_state.quiz_state = 'results'
            st.rerun()
    
    # K√∂vetkez≈ë k√©rd√©s
    if st.session_state.current_question < len(st.session_state.quiz_questions) - 1:
        st.session_state.current_question += 1
        st.session_state.question_start_time = datetime.now()
        st.rerun()
    else:
        st.session_state.quiz_state = 'results'
        st.rerun()

def show_results():
    """Eredm√©nyek megjelen√≠t√©se"""
    st.title("üèÜ Quiz Eredm√©nyek")
    st.markdown("---")
    
    # Eredm√©nyek sz√°m√≠t√°sa
    total_questions = len(st.session_state.quiz_questions)
    correct_answers = st.session_state.score
    percentage = (correct_answers / total_questions) * 100 if total_questions > 0 else 0
    
    # Id≈ë sz√°m√≠t√°sa
    if st.session_state.quiz_start_time:
        end_time = datetime.now()
        duration = end_time - st.session_state.quiz_start_time
        duration_seconds = duration.total_seconds()
        minutes = int(duration_seconds // 60)
        seconds = int(duration_seconds % 60)
    else:
        duration_seconds = 0
        minutes, seconds = 0, 0
    
    # Pontsz√°m kisz√°m√≠t√°sa (fejlett m√≥dokhoz)
    scoring_result = QuizScoring.calculate_score(
        st.session_state.mode_manager.current_mode,
        st.session_state.mode_manager.current_difficulty,
        correct_answers,
        total_questions,
        duration_seconds,
        st.session_state.mode_manager.max_streak,
        st.session_state.mode_manager.lives
    )
    
    # Analytics r√∂gz√≠t√©se
    quiz_data = {
        "topics": st.session_state.selected_topics,
        "total_questions": total_questions,
        "correct_answers": correct_answers,
        "score_percentage": percentage,
        "duration_seconds": duration_seconds,
        "question_details": st.session_state.answers
    }
    st.session_state.analytics.record_quiz_session(quiz_data)
    
    # Eredm√©nyek megjelen√≠t√©se - jobb form√°z√°ssal
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            label="üìä Alap Pontsz√°m",
            value=f"{correct_answers}/{total_questions}",
            delta=f"{percentage:.1f}%"
        )
    
    with col2:
        st.metric(
            label="‚è±Ô∏è Id≈ë",
            value=f"{minutes} perc {seconds} mp"
        )
    
    with col3:
        st.metric(
            label="üèÜ V√©gs≈ë Pontsz√°m",
            value=scoring_result['final_score'],
            delta=f"Szorz√≥: {scoring_result['difficulty_multiplier']}x"
        )
    
    with col4:
        # √ârt√©kel√©s
        if scoring_result['final_score'] >= 90:
            grade = "üèÖ Kiv√°l√≥"
            grade_color = "success"
        elif scoring_result['final_score'] >= 80:
            grade = "ü•à J√≥"
            grade_color = "success"
        elif scoring_result['final_score'] >= 70:
            grade = "ü•â K√∂zepes"
            grade_color = "warning"
        elif scoring_result['final_score'] >= 60:
            grade = "üìù Megfelel≈ë"
            grade_color = "warning"
        else:
            grade = "‚ùå El√©gtelen"
            grade_color = "error"
        
        st.metric(
            label="üìà √ârt√©kel√©s",
            value=grade
        )
    
    # R√©szletes pontsz√°m√≠t√°s
    st.markdown("### üìã R√©szletes Pontsz√°m√≠t√°s")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown(f"""
        <div class="summary-box">
            <h4>üìä Alap pontsz√°m</h4>
            <p><strong>{scoring_result['base_score']} pont</strong></p>
            
            <h4>üéØ Neh√©zs√©gi szorz√≥</h4>
            <p><strong>{scoring_result['difficulty_multiplier']}x</strong></p>
            
            <h4>üéÆ M√≥d b√≥nusz</h4>
            <p><strong>{scoring_result['mode_bonus']} pont</strong></p>
            
            <h4>üî• Streak b√≥nusz</h4>
            <p><strong>{scoring_result['streak_bonus']} pont</strong></p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div class="summary-box">
            <h4>üî• Maxim√°lis streak</h4>
            <p><strong>{st.session_state.mode_manager.max_streak} k√©rd√©s</strong></p>
            
            <h4>‚è±Ô∏è √Åtlagos v√°laszid≈ë</h4>
            <p><strong>{duration_seconds/total_questions:.1f} m√°sodperc</strong></p>
            
            <h4>üéÆ M√≥d</h4>
            <p><strong>{st.session_state.mode_manager.current_mode.value.title()}</strong></p>
            
            <h4>üéØ Neh√©zs√©g</h4>
            <p><strong>{st.session_state.mode_manager.current_difficulty.value.title()}</strong></p>
        </div>
        """, unsafe_allow_html=True)
    
    # R√©szletes eredm√©nyek
    st.markdown("### üìã K√©rd√©senk√©nti eredm√©nyek")
    
    for i, answer in enumerate(st.session_state.answers):
        is_correct = answer['is_correct']
        status = "‚úÖ" if is_correct else "‚ùå"
        
        st.markdown(f"""
        <div class="summary-box">
            <h4>{status} K√©rd√©s {i+1}</h4>
            <p><strong>K√©rd√©s:</strong> {answer['question']}</p>
            <p><strong>V√°laszod:</strong> {answer['options'][answer['selected']] if answer['selected'] >= 0 else 'Id≈ë lej√°rt'}</p>
            <p><strong>Helyes v√°lasz:</strong> {answer['options'][answer['correct']]}</p>
            <p><strong>V√°laszid≈ë:</strong> {answer['time_taken']:.1f} m√°sodperc</p>
        </div>
        """, unsafe_allow_html=True)
    
    # √öj quiz ind√≠t√°sa
    if st.button("üîÑ √öj quiz ind√≠t√°sa", type="primary", use_container_width=True):
        reset_quiz()
        st.rerun()

def show_analytics_page():
    """Analytics oldal megjelen√≠t√©se"""
    from quiz_analytics import show_analytics_dashboard
    show_analytics_dashboard()

def show_settings_page():
    """Be√°ll√≠t√°sok oldal megjelen√≠t√©se"""
    st.markdown("## ‚öôÔ∏è Be√°ll√≠t√°sok")
    
    st.markdown("### üéØ Quiz Be√°ll√≠t√°sok")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### Alap√©rtelmezett be√°ll√≠t√°sok")
        default_music_questions = st.number_input("Alap√©rtelmezett zenei k√©rd√©sek", 1, 20, 10)
        default_other_questions = st.number_input("Alap√©rtelmezett egy√©b k√©rd√©sek", 1, 20, 10)
    
    with col2:
        st.markdown("#### Id≈ëz√≠t≈ë be√°ll√≠t√°sok")
        default_timed_limit = st.number_input("Alap√©rtelmezett id≈ëkorl√°t (m√°sodperc)", 10, 60, 30)
        default_challenge_limit = st.number_input("Kih√≠v√°s m√≥d id≈ëkorl√°t (m√°sodperc)", 10, 30, 20)
    
    st.markdown("### üéµ Audio Be√°ll√≠t√°sok")
    
    col1, col2 = st.columns(2)
    
    with col1:
        auto_play_audio = st.checkbox("Automatikus audio lej√°tsz√°s", False)
        show_audio_filename = st.checkbox("Audio f√°jln√©v megjelen√≠t√©se", True)
    
    with col2:
        audio_volume = st.slider("Alap√©rtelmezett hanger≈ë", 0, 100, 50)
        audio_quality = st.selectbox("Audio min≈ës√©g", ["Alacsony", "K√∂zepes", "Magas"], index=1)
    
    st.markdown("### üìä Analytics Be√°ll√≠t√°sok")
    
    col1, col2 = st.columns(2)
    
    with col1:
        track_performance = st.checkbox("Teljes√≠tm√©ny k√∂vet√©se", True)
        save_detailed_results = st.checkbox("R√©szletes eredm√©nyek ment√©se", True)
    
    with col2:
        analytics_retention_days = st.number_input("Analytics adatok meg≈ërz√©se (nap)", 30, 365, 90)
        export_analytics = st.checkbox("Analytics export√°l√°sa", False)
    
    # Be√°ll√≠t√°sok ment√©se
    if st.button("üíæ Be√°ll√≠t√°sok ment√©se", type="primary"):
        st.success("Be√°ll√≠t√°sok mentve!")

if __name__ == "__main__":
    main() 