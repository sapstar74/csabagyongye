"""
üß† PDF Alap√∫ Quiz Alkalmaz√°s - Le√≠r√≥ Audio F√°jlnevekkel
10 k√©rd√©ses feleletv√°laszt√≥s teszt a felt√∂lt√∂tt PDF tartalom alapj√°n
"""

import streamlit as st
import random
import time
from datetime import datetime
import os
from pathlib import Path
from topics.foldrajz_complete import FOLDRAJZ_QUESTIONS_COMPLETE as FOLDRAJZ_QUESTIONS
from classical_music_questions_tschaikovsky_updated import CLASSICAL_MUSIC_QUESTIONS as ZENEK_QUESTIONS
from topics.tudosok import TUDOSOK_QUESTIONS
from topics.mitologia_all_questions import MITOLOGIA_QUESTIONS_ALL
from topics.haboru_all_questions import HABORU_QUESTIONS_ALL
from topics.kiralyok import KIRALYOK_QUESTIONS
from topics.allatok_balanced import ALLATOK_QUESTIONS_BALANCED
from topics.dramak import DRAMAK_QUESTIONS
from topics.sport_logok import SPORT_LOGOK_QUESTIONS
from topics.zaszlok_all_questions import ZASZLOK_QUESTIONS_ALL
from topics.magyar_zenekarok import MAGYAR_ZENEKAROK_QUESTIONS
from topics.nemzetkozi_zenekarok import NEMZETKOZI_ZENEKAROK_QUESTIONS
from topics.idiota_szavak_reversed import IDIOTA_SZAVAK_QUESTIONS
from custom_audio_player import audio_player_with_download
from audio_mapping_descriptive import get_audio_filename, get_audio_info

# Page config
st.set_page_config(
    page_title="Quiz App",
    page_icon="üéØ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        text-align: center;
        color: #1f77b4;
        margin-bottom: 2rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }
    .topic-button {
        background-color: #f0f2f6;
        border: 2px solid #e0e0e0;
        border-radius: 10px;
        padding: 1rem;
        margin: 0.5rem;
        text-align: center;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    .topic-button:hover {
        background-color: #e0e0e0;
        border-color: #1f77b4;
    }
    .topic-button.selected {
        background-color: #1f77b4;
        color: white;
        border-color: #1f77b4;
    }
    .quiz-container {
        background-color: white;
        border-radius: 15px;
        padding: 2rem;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        margin: 1rem 0;
    }
    .question-text {
        font-size: 1.5rem;
        font-weight: bold;
        margin-bottom: 1.5rem;
        color: #ffffff;
    }
    .option-button {
        width: 100%;
        text-align: left;
        padding: 1rem;
        margin: 0.5rem 0;
        border: 2px solid #e0e0e0;
        border-radius: 10px;
        background-color: transparent;
        transition: all 0.3s ease;
    }
    .option-button:hover {
        background-color: #e9ecef;
        border-color: #1f77b4;
    }
    .option-button.selected {
        background-color: #1f77b4;
        color: white;
        border-color: #1f77b4;
    }
    .option-button.correct {
        background-color: #28a745;
        color: white;
        border-color: #28a745;
    }
    .option-button.incorrect {
        background-color: #dc3545;
        color: white;
        border-color: #dc3545;
    }
    .score-display {
        font-size: 1.2rem;
        font-weight: bold;
        text-align: center;
        padding: 1rem;
        background-color: transparent;
        border-radius: 10px;
        margin: 1rem 0;
        color: #ffffff;
    }
    .summary-box {
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 1rem;
        margin: 1rem 0;
        border-left: 4px solid #1f77b4;
    }
    .audio-info {
        background-color: #e3f2fd;
        border-radius: 8px;
        padding: 0.5rem;
        margin: 0.5rem 0;
        font-size: 0.9rem;
        color: #1976d2;
    }
</style>
""", unsafe_allow_html=True)

# Quiz adatok t√©mak√∂r√∂k szerint csoportos√≠tva
QUIZ_DATA_BY_TOPIC = {
    "f√∂ldrajz": FOLDRAJZ_QUESTIONS,
    "komolyzene": ZENEK_QUESTIONS,
    "magyar_zenekarok": MAGYAR_ZENEKAROK_QUESTIONS,
    "nemzetkozi_zenekarok": NEMZETKOZI_ZENEKAROK_QUESTIONS,
    "h√°bor√∫k": HABORU_QUESTIONS_ALL,
    "magyar_kir√°lyok": KIRALYOK_QUESTIONS,
    "tud√≥sok": TUDOSOK_QUESTIONS,
    "mitol√≥gia": MITOLOGIA_QUESTIONS_ALL,
    "√°llatok": ALLATOK_QUESTIONS_BALANCED,
    "dr√°m√°k": DRAMAK_QUESTIONS,
    "sport_log√≥k": SPORT_LOGOK_QUESTIONS,
    "z√°szl√≥k": ZASZLOK_QUESTIONS_ALL,
    "idi√≥ta_szavak": IDIOTA_SZAVAK_QUESTIONS,
}

# Initialize session state
if 'quiz_state' not in st.session_state:
    st.session_state.quiz_state = 'selection'
    st.session_state.selected_topics = []
    st.session_state.current_question = 0
    st.session_state.score = 0
    st.session_state.answers = []
    st.session_state.quiz_questions = []
    st.session_state.quiz_start_time = None

def reset_quiz():
    st.session_state.quiz_state = 'selection'
    st.session_state.selected_topics = []
    st.session_state.current_question = 0
    st.session_state.score = 0
    st.session_state.answers = []
    st.session_state.quiz_questions = []
    st.session_state.quiz_start_time = None
    st.session_state.selected_answer = None

def start_quiz():
    if not st.session_state.selected_topics:
        st.error("K√©rlek v√°lassz ki legal√°bb egy t√©mak√∂r√∂t!")
        return
    
    all_questions = []
    
    # Zenei t√©mak√∂r√∂k k√ºl√∂n kezel√©se
    music_topics = ["komolyzene", "magyar_zenekarok", "nemzetkozi_zenekarok"]
    other_topics = [t for t in st.session_state.selected_topics if t not in music_topics]
    
    # Zenei t√©mak√∂r√∂k kezel√©se
    selected_music_topics = [t for t in st.session_state.selected_topics if t in music_topics]
    if selected_music_topics:
        music_total_questions = st.session_state.get('music_total_questions', 10)
        music_auto_distribute = st.session_state.get('music_auto_distribute', True)
        
        if music_auto_distribute:
            # Automatikus eloszt√°s a zenei t√©mak√∂r√∂k k√∂z√∂tt
            questions_per_music_topic = music_total_questions // len(selected_music_topics)
            remaining_music_questions = music_total_questions % len(selected_music_topics)
            
            for i, topic in enumerate(selected_music_topics):
                if topic in QUIZ_DATA_BY_TOPIC:
                    topic_questions = QUIZ_DATA_BY_TOPIC[topic]
                    current_questions = questions_per_music_topic + (1 if i < remaining_music_questions else 0)
                    current_questions = min(current_questions, len(topic_questions))
                    
                    # V√©letlenszer≈± k√©rd√©sek kiv√°laszt√°sa
                    selected_questions = random.sample(topic_questions, current_questions)
                    all_questions.extend(selected_questions)
        else:
            # Manu√°lis be√°ll√≠t√°s minden zenei t√©mak√∂rh√∂z
            for topic in selected_music_topics:
                if topic in QUIZ_DATA_BY_TOPIC:
                    topic_questions = QUIZ_DATA_BY_TOPIC[topic]
                    topic_question_count = st.session_state.get(f'{topic}_questions', 5)
                    topic_question_count = min(topic_question_count, len(topic_questions))
                    
                    # V√©letlenszer≈± k√©rd√©sek kiv√°laszt√°sa
                    selected_questions = random.sample(topic_questions, topic_question_count)
                    all_questions.extend(selected_questions)
    
    # Egy√©b t√©mak√∂r√∂k kezel√©se
    for topic in other_topics:
        if topic in QUIZ_DATA_BY_TOPIC:
            topic_questions = QUIZ_DATA_BY_TOPIC[topic]
            topic_question_count = st.session_state.get(f'{topic}_questions', 5)
            topic_question_count = min(topic_question_count, len(topic_questions))
            
            # V√©letlenszer≈± k√©rd√©sek kiv√°laszt√°sa
            selected_questions = random.sample(topic_questions, topic_question_count)
            all_questions.extend(selected_questions)
    
    if not all_questions:
        st.error("Nincs el√©rhet≈ë k√©rd√©s a kiv√°lasztott t√©mak√∂r√∂kb≈ël!")
        return
    
    # V√©letlenszer≈± sorrendbe rendez√©s
    random.shuffle(all_questions)
    
    st.session_state.quiz_questions = all_questions
    st.session_state.current_question = 0
    st.session_state.score = 0
    st.session_state.answers = []
    st.session_state.quiz_state = 'quiz'
    st.session_state.quiz_start_time = datetime.now()

def main():
    st.markdown('<h1 class="main-header">üéØ Quiz Alkalmaz√°s</h1>', unsafe_allow_html=True)
    
    if st.session_state.quiz_state == 'selection':
        show_topic_selection()
    elif st.session_state.quiz_state == 'quiz':
        show_quiz()
    elif st.session_state.quiz_state == 'results':
        show_results()

def show_topic_selection():
    st.markdown("### üìö T√©mak√∂r√∂k kiv√°laszt√°sa")
    
    # T√©mak√∂r√∂k megjelen√≠t√©se
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("**üèõÔ∏è T√∂rt√©nelmi t√©mak√∂r√∂k**")
        if st.button("üèõÔ∏è H√°bor√∫k", key="h√°bor√∫k"):
            if "h√°bor√∫k" not in st.session_state.selected_topics:
                st.session_state.selected_topics.append("h√°bor√∫k")
            st.rerun()
        
        if st.button("üëë Magyar kir√°lyok", key="magyar_kir√°lyok"):
            if "magyar_kir√°lyok" not in st.session_state.selected_topics:
                st.session_state.selected_topics.append("magyar_kir√°lyok")
            st.rerun()
        
        if st.button("üß† Tud√≥sok", key="tud√≥sok"):
            if "tud√≥sok" not in st.session_state.selected_topics:
                st.session_state.selected_topics.append("tud√≥sok")
            st.rerun()
        
        if st.button("üèõÔ∏è Mitol√≥gia", key="mitol√≥gia"):
            if "mitol√≥gia" not in st.session_state.selected_topics:
                st.session_state.selected_topics.append("mitol√≥gia")
            st.rerun()
    
    with col2:
        st.markdown("**üéµ Zenei t√©mak√∂r√∂k**")
        if st.button("üéº Komolyzene", key="komolyzene"):
            if "komolyzene" not in st.session_state.selected_topics:
                st.session_state.selected_topics.append("komolyzene")
            st.rerun()
        
        if st.button("üá≠üá∫ Magyar zenekarok", key="magyar_zenekarok"):
            if "magyar_zenekarok" not in st.session_state.selected_topics:
                st.session_state.selected_topics.append("magyar_zenekarok")
            st.rerun()
        
        if st.button("üåç Nemzetk√∂zi zenekarok", key="nemzetkozi_zenekarok"):
            if "nemzetkozi_zenekarok" not in st.session_state.selected_topics:
                st.session_state.selected_topics.append("nemzetkozi_zenekarok")
            st.rerun()
    
    with col3:
        st.markdown("**üéØ Egy√©b t√©mak√∂r√∂k**")
        if st.button("üó∫Ô∏è F√∂ldrajz", key="f√∂ldrajz"):
            if "f√∂ldrajz" not in st.session_state.selected_topics:
                st.session_state.selected_topics.append("f√∂ldrajz")
            st.rerun()
        
        if st.button("üêæ √Ållatok", key="√°llatok"):
            if "√°llatok" not in st.session_state.selected_topics:
                st.session_state.selected_topics.append("√°llatok")
            st.rerun()
        
        if st.button("üé≠ Dr√°m√°k", key="dr√°m√°k"):
            if "dr√°m√°k" not in st.session_state.selected_topics:
                st.session_state.selected_topics.append("dr√°m√°k")
            st.rerun()
        
        if st.button("üèÜ Sport log√≥k", key="sport_log√≥k"):
            if "sport_log√≥k" not in st.session_state.selected_topics:
                st.session_state.selected_topics.append("sport_log√≥k")
            st.rerun()
        
        if st.button("üèÅ Z√°szl√≥k", key="z√°szl√≥k"):
            if "z√°szl√≥k" not in st.session_state.selected_topics:
                st.session_state.selected_topics.append("z√°szl√≥k")
            st.rerun()
        
        if st.button("ü§™ Idi√≥ta szavak", key="idi√≥ta_szavak"):
            if "idi√≥ta_szavak" not in st.session_state.selected_topics:
                st.session_state.selected_topics.append("idi√≥ta_szavak")
            st.rerun()
    
    # Kiv√°lasztott t√©mak√∂r√∂k megjelen√≠t√©se
    if st.session_state.selected_topics:
        st.markdown("### ‚úÖ Kiv√°lasztott t√©mak√∂r√∂k:")
        for topic in st.session_state.selected_topics:
            st.write(f"‚Ä¢ {topic}")
        
        # K√©rd√©sek sz√°m√°nak be√°ll√≠t√°sa
        st.markdown("### ‚öôÔ∏è Be√°ll√≠t√°sok")
        
        # Zenei t√©mak√∂r√∂k k√ºl√∂n kezel√©se
        music_topics = ["komolyzene", "magyar_zenekarok", "nemzetkozi_zenekarok"]
        selected_music_topics = [t for t in st.session_state.selected_topics if t in music_topics]
        
        if selected_music_topics:
            st.markdown("**üéµ Zenei k√©rd√©sek be√°ll√≠t√°sa**")
            music_auto_distribute = st.checkbox("Automatikus eloszt√°s a zenei t√©mak√∂r√∂k k√∂z√∂tt", value=True, key="music_auto_distribute")
            
            if music_auto_distribute:
                music_total_questions = st.slider("√ñsszes zenei k√©rd√©s sz√°ma", 1, 30, 10, key="music_total_questions")
            else:
                for topic in selected_music_topics:
                    topic_questions = QUIZ_DATA_BY_TOPIC.get(topic, [])
                    max_questions = len(topic_questions)
                    if max_questions > 0:
                        st.slider(f"{topic} k√©rd√©sek sz√°ma", 1, max_questions, min(5, max_questions), key=f"{topic}_questions")
        
        # Egy√©b t√©mak√∂r√∂k be√°ll√≠t√°sa
        other_topics = [t for t in st.session_state.selected_topics if t not in music_topics]
        if other_topics:
            st.markdown("**üìö Egy√©b k√©rd√©sek be√°ll√≠t√°sa**")
            for topic in other_topics:
                topic_questions = QUIZ_DATA_BY_TOPIC.get(topic, [])
                max_questions = len(topic_questions)
                if max_questions > 0:
                    st.slider(f"{topic} k√©rd√©sek sz√°ma", 1, max_questions, min(5, max_questions), key=f"{topic}_questions")
        
        # Quiz ind√≠t√°sa
        if st.button("üöÄ Quiz ind√≠t√°sa", type="primary"):
            start_quiz()

def show_quiz():
    if st.session_state.current_question >= len(st.session_state.quiz_questions):
        st.session_state.quiz_state = 'results'
        st.rerun()
        return
    
    current_q = st.session_state.quiz_questions[st.session_state.current_question]
    
    # Progress bar
    progress = (st.session_state.current_question + 1) / len(st.session_state.quiz_questions)
    st.progress(progress)
    
    # K√©rd√©s sz√°ma √©s pontsz√°m
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown(f"### üìù K√©rd√©s {st.session_state.current_question + 1}/{len(st.session_state.quiz_questions)}")
    with col2:
        st.markdown(f"### üéØ Pontsz√°m: {st.session_state.score}")
    with col3:
        if st.session_state.quiz_start_time:
            elapsed = datetime.now() - st.session_state.quiz_start_time
            st.markdown(f"### ‚è±Ô∏è Id≈ë: {elapsed.seconds // 60}:{elapsed.seconds % 60:02d}")
    
    # K√©rd√©s megjelen√≠t√©se
    st.markdown(f'<div class="quiz-container"><div class="question-text">{current_q["question"]}</div></div>', unsafe_allow_html=True)
    
    # Audio lej√°tsz√°s (ha van)
    if "spotify_embed" in current_q and current_q["spotify_embed"]:
        audio_filename = get_audio_filename(current_q["spotify_embed"], st.session_state.current_question)
        audio_info = get_audio_info(current_q["spotify_embed"])
        
        if audio_filename:
            audio_path = f"audio_files/{audio_filename}"
            if os.path.exists(audio_path):
                # Audio inform√°ci√≥ megjelen√≠t√©se
                if audio_info:
                    st.markdown(f"""
                    <div class="audio-info">
                        üéµ <strong>{audio_info['artist']}</strong> - {audio_info['title']}
                    </div>
                    """, unsafe_allow_html=True)
                
                # Audio lej√°tsz√≥
                audio_player_with_download(audio_path)
            else:
                st.warning(f"Audio f√°jl nem tal√°lhat√≥: {audio_filename}")
    
    # V√°laszlehet≈ës√©gek
    if "options" in current_q:
        options = current_q["options"]
        random.shuffle(options)
        
        selected_answer = None
        for i, option in enumerate(options):
            if st.button(option, key=f"option_{i}", use_container_width=True):
                selected_answer = option
                break
        
        if selected_answer:
            st.session_state.selected_answer = selected_answer
            
            # V√°lasz ellen≈ërz√©se
            correct_answer = current_q["correct_answer"]
            is_correct = selected_answer == correct_answer
            
            if is_correct:
                st.session_state.score += 1
                st.success(f"‚úÖ Helyes! A v√°lasz: {correct_answer}")
            else:
                st.error(f"‚ùå Helytelen! A helyes v√°lasz: {correct_answer}")
            
            # V√°lasz ment√©se
            st.session_state.answers.append({
                "question": current_q["question"],
                "user_answer": selected_answer,
                "correct_answer": correct_answer,
                "is_correct": is_correct
            })
            
            # K√∂vetkez≈ë k√©rd√©s
            time.sleep(2)
            st.session_state.current_question += 1
            st.session_state.selected_answer = None
            st.rerun()

def show_results():
    st.markdown('<h1 class="main-header">üèÜ Quiz Eredm√©nyek</h1>', unsafe_allow_html=True)
    
    # V√©gs≈ë pontsz√°m
    total_questions = len(st.session_state.quiz_questions)
    score_percentage = (st.session_state.score / total_questions) * 100
    
    st.markdown(f"""
    <div class="summary-box">
        <h2>üìä V√©gs≈ë Eredm√©ny</h2>
        <p><strong>Pontsz√°m:</strong> {st.session_state.score}/{total_questions}</p>
        <p><strong>Sz√°zal√©k:</strong> {score_percentage:.1f}%</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Id≈ë
    if st.session_state.quiz_start_time:
        total_time = datetime.now() - st.session_state.quiz_start_time
        st.markdown(f"<p><strong>‚è±Ô∏è Teljes id≈ë:</strong> {total_time.seconds // 60} perc {total_time.seconds % 60} m√°sodperc</p>", unsafe_allow_html=True)
    
    # R√©szletes eredm√©nyek
    st.markdown("### üìù R√©szletes eredm√©nyek")
    for i, answer in enumerate(st.session_state.answers):
        status = "‚úÖ" if answer["is_correct"] else "‚ùå"
        st.markdown(f"""
        <div class="summary-box">
            <p><strong>{i+1}. k√©rd√©s:</strong> {answer["question"]}</p>
            <p><strong>Te v√°laszod:</strong> {answer["user_answer"]}</p>
            <p><strong>Helyes v√°lasz:</strong> {answer["correct_answer"]}</p>
            <p><strong>Eredm√©ny:</strong> {status}</p>
        </div>
        """, unsafe_allow_html=True)
    
    # √öj quiz ind√≠t√°sa
    if st.button("üîÑ √öj Quiz", type="primary"):
        reset_quiz()
        st.rerun()

if __name__ == "__main__":
    main() 