#!/usr/bin/env python3
"""
Spotify Playlist Manager - One Hit Wonders √©s egy√©b playlistek kezel√©se
"""

import requests
import json
import random
import time
from typing import List, Dict, Optional
from spotify_api_config import SPOTIFY_CLIENT_ID, SPOTIFY_CLIENT_SECRET, SPOTIFY_AUTH_URL

class SpotifyPlaylistManager:
    def __init__(self):
        self.access_token = None
        self.base_url = "https://api.spotify.com/v1"
        
    def get_access_token(self) -> bool:
        """Spotify access token beszerz√©se"""
        try:
            auth_response = requests.post(SPOTIFY_AUTH_URL, {
                'grant_type': 'client_credentials',
                'client_id': SPOTIFY_CLIENT_ID,
                'client_secret': SPOTIFY_CLIENT_SECRET,
            })
            
            if auth_response.status_code == 200:
                auth_data = auth_response.json()
                self.access_token = auth_data['access_token']
                return True
            else:
                print(f"Hiba az access token beszerz√©s√©n√©l: {auth_response.status_code}")
                return False
                
        except Exception as e:
            print(f"Hiba az access token beszerz√©s√©n√©l: {e}")
            return False
    
    def get_playlist_tracks(self, playlist_id: str) -> List[Dict]:
        """Playlist dalainak lek√©r√©se"""
        if not self.access_token:
            if not self.get_access_token():
                return []
        
        headers = {
            'Authorization': f'Bearer {self.access_token}'
        }
        
        tracks = []
        offset = 0
        limit = 100
        
        while True:
            url = f"{self.base_url}/playlists/{playlist_id}/tracks"
            params = {
                'offset': offset,
                'limit': limit,
                'market': 'HU'
            }
            
            try:
                response = requests.get(url, headers=headers, params=params)
                
                if response.status_code == 200:
                    data = response.json()
                    items = data.get('items', [])
                    
                    if not items:
                        break
                    
                    for item in items:
                        track = item.get('track')
                        if track and track.get('preview_url'):
                            track_info = {
                                'id': track['id'],
                                'name': track['name'],
                                'artist': track['artists'][0]['name'] if track['artists'] else 'Unknown',
                                'preview_url': track['preview_url'],
                                'external_url': track['external_urls']['spotify'],
                                'album': track['album']['name'] if track['album'] else 'Unknown'
                            }
                            tracks.append(track_info)
                    
                    offset += limit
                    
                    # Ha nincs t√∂bb dal, kil√©p√ºnk
                    if len(items) < limit:
                        break
                        
                else:
                    print(f"Hiba a playlist lek√©rdez√©s√©n√©l: {response.status_code}")
                    break
                    
            except Exception as e:
                print(f"Hiba a playlist lek√©rdez√©s√©n√©l: {e}")
                break
        
        return tracks
    
    def get_random_tracks_from_playlist(self, playlist_id: str, count: int = 10) -> List[Dict]:
        """Random dalok kiv√°laszt√°sa playlistb≈ël"""
        tracks = self.get_playlist_tracks(playlist_id)
        
        if not tracks:
            return []
        
        # Random kiv√°laszt√°s, de maximum a rendelkez√©sre √°ll√≥ dalok sz√°m√°t
        count = min(count, len(tracks))
        return random.sample(tracks, count)
    
    def get_extended_preview_url(self, preview_url: str, duration: int = 90) -> str:
        """90 m√°sodperces preview URL gener√°l√°sa (ha lehets√©ges)"""
        if not preview_url:
            return preview_url
        
        # A Spotify preview URL-ek alap√©rtelmezetten 30 m√°sodpercesek
        # Sajnos a Spotify API nem t√°mogatja a hosszabb preview-okat
        # De visszaadjuk az eredeti URL-t, √©s a frontend kezeli majd
        return preview_url
    
    def generate_question_options(self, correct_artist: str, all_tracks: List[Dict]) -> List[str]:
        """V√°laszopci√≥k gener√°l√°sa a helyes el≈ëad√≥val egy√ºtt"""
        options = [correct_artist]
        
        # M√°s el≈ëad√≥k kiv√°laszt√°sa random
        other_artists = [track['artist'] for track in all_tracks if track['artist'] != correct_artist]
        
        if len(other_artists) >= 3:
            # 3 random m√°sik el≈ëad√≥
            random_artists = random.sample(other_artists, 3)
            options.extend(random_artists)
        else:
            # Ha nincs el√©g m√°sik el≈ëad√≥, ismert One Hit Wonders el≈ëad√≥kat adunk hozz√°
            famous_one_hit_wonders = [
                "Vanilla Ice", "Gotye", "Soft Cell", "Mark Morrison", 
                "Crazy Town", "Rednex", "Spin Doctors", "The Knack",
                "Whigfield", "Baha Men", "Snow", "Caesars"
            ]
            
            for artist in famous_one_hit_wonders:
                if artist not in options and len(options) < 4:
                    options.append(artist)
        
        # Random sorrendbe rendez√©s
        random.shuffle(options)
        return options

# One Hit Wonders playlist ID
ONE_HIT_WONDERS_PLAYLIST_ID = "37i9dQZF1DX0Ew6u9sRtTY"

def get_one_hit_wonders_questions(count: int = 20) -> List[Dict]:
    """One Hit Wonders k√©rd√©sek gener√°l√°sa"""
    manager = SpotifyPlaylistManager()
    
    # Random dalok lek√©r√©se a playlistb≈ël
    random_tracks = manager.get_random_tracks_from_playlist(ONE_HIT_WONDERS_PLAYLIST_ID, count * 2)
    
    if not random_tracks:
        print("Nem siker√ºlt dalokat lek√©rni a Spotify playlistb≈ël")
        return []
    
    # √ñsszes dal lek√©r√©se a v√°laszopci√≥k gener√°l√°s√°hoz
    all_tracks = manager.get_playlist_tracks(ONE_HIT_WONDERS_PLAYLIST_ID)
    
    questions = []
    
    for i, track in enumerate(random_tracks[:count]):
        # V√°laszopci√≥k gener√°l√°sa
        options = manager.generate_question_options(track['artist'], all_tracks)
        
        # Helyes v√°lasz index√©nek meghat√°roz√°sa
        correct_index = options.index(track['artist'])
        
        question = {
            "question": f"Ki az el≈ëad√≥ a '{track['name']}' c√≠m≈± dalban?",
            "spotify_track_id": track['id'],
            "spotify_preview_url": self.get_extended_preview_url(track['preview_url'], 90),
            "spotify_external_url": track['external_url'],
            "options": options,
            "correct": correct_index,
            "explanation": f"'{track['name']}' egy One Hit Wonder dal az el≈ëad√≥t√≥l: {track['artist']}",
            "topic": "one_hit_wonders",
            "album": track['album'],
            "preview_duration": 90  # 90 m√°sodperces preview
        }
        
        questions.append(question)
    
    return questions

def test_spotify_integration():
    """Tesztel√©s a Spotify integr√°ci√≥hoz"""
    print("üéµ Spotify One Hit Wonders Integr√°ci√≥ Tesztel√©se")
    print("=" * 50)
    
    manager = SpotifyPlaylistManager()
    
    # Access token tesztel√©se
    if manager.get_access_token():
        print("‚úÖ Access token sikeresen beszerezve")
        
        # Playlist tesztel√©se
        tracks = manager.get_playlist_tracks(ONE_HIT_WONDERS_PLAYLIST_ID)
        print(f"‚úÖ Playlist dalok lek√©rdezve: {len(tracks)} dal")
        
        if tracks:
            print("\nüìã Els≈ë 5 dal:")
            for i, track in enumerate(tracks[:5]):
                print(f"  {i+1}. {track['artist']} - {track['name']}")
            
            # K√©rd√©s gener√°l√°s tesztel√©se
            questions = get_one_hit_wonders_questions(3)
            print(f"\n‚ùì Gener√°lt k√©rd√©sek: {len(questions)}")
            
            for i, q in enumerate(questions):
                print(f"\n  K√©rd√©s {i+1}: {q['question']}")
                print(f"  V√°laszopci√≥k: {q['options']}")
                print(f"  Helyes v√°lasz: {q['options'][q['correct']]}")
        
    else:
        print("‚ùå Access token beszerz√©se sikertelen")
        print("Ellen≈ërizd a Spotify API credentials be√°ll√≠t√°sokat!")

if __name__ == "__main__":
    test_spotify_integration() 