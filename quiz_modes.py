"""
üéÆ Quiz M√≥dok √©s Neh√©zs√©gi Szintek
K√ºl√∂nb√∂z≈ë j√°t√©km√≥dok √©s neh√©zs√©gi szintek implement√°l√°sa
"""

import random
import time
from datetime import datetime, timedelta
from enum import Enum
import streamlit as st

class QuizMode(Enum):
    """Quiz m√≥dok enum"""
    NORMAL = "normal"
    TIMED = "timed"
    SURVIVAL = "survival"
    PRACTICE = "practice"
    CHALLENGE = "challenge"

class DifficultyLevel(Enum):
    """Neh√©zs√©gi szintek enum"""
    EASY = "easy"      # K√∂nny≈± - feleletv√°laszt√≥s + megold√°s
    MEDIUM = "medium"  # K√∂zepes - feleletv√°laszt√≥s
    HARD = "hard"      # Neh√©z - szabad sz√∂veges bevitel

class QuizModeManager:
    """Quiz m√≥dok kezel≈ë oszt√°ly"""
    
    def __init__(self):
        self.current_mode = QuizMode.NORMAL
        self.current_difficulty = DifficultyLevel.MEDIUM
        self.time_limit = None
        self.lives = None
        self.streak = 0
        self.max_streak = 0
        self.show_solution = False  # Megold√°s megjelen√≠t√©se (K√∂nny≈± m√≥d)
        self.text_input_mode = False  # Sz√∂veges bevitel (Neh√©z m√≥d)
    
    def set_mode(self, mode: QuizMode, **kwargs):
        """Quiz m√≥d be√°ll√≠t√°sa"""
        self.current_mode = mode
        
        if mode == QuizMode.TIMED:
            self.time_limit = kwargs.get('time_limit', 30)  # m√°sodpercek
        elif mode == QuizMode.SURVIVAL:
            self.lives = kwargs.get('lives', 3)
        elif mode == QuizMode.CHALLENGE:
            self.time_limit = kwargs.get('time_limit', 20)
            self.lives = kwargs.get('lives', 1)
    
    def set_difficulty(self, difficulty: DifficultyLevel):
        """Neh√©zs√©gi szint be√°ll√≠t√°sa"""
        self.current_difficulty = difficulty
        
        # Neh√©zs√©gi szint specifikus be√°ll√≠t√°sok
        if difficulty == DifficultyLevel.EASY:
            self.show_solution = True
            self.text_input_mode = False
        elif difficulty == DifficultyLevel.MEDIUM:
            self.show_solution = False
            self.text_input_mode = False
        elif difficulty == DifficultyLevel.HARD:
            self.show_solution = False
            self.text_input_mode = True
    
    def get_mode_config(self):
        """Aktu√°lis m√≥d konfigur√°ci√≥ja"""
        config = {
            "mode": self.current_mode.value,
            "difficulty": self.current_difficulty.value,
            "time_limit": self.time_limit,
            "lives": self.lives,
            "streak": self.streak,
            "max_streak": self.max_streak,
            "show_solution": self.show_solution,
            "text_input_mode": self.text_input_mode
        }
        return config
    
    def update_streak(self, correct: bool):
        """Streak friss√≠t√©se"""
        if correct:
            self.streak += 1
            self.max_streak = max(self.max_streak, self.streak)
        else:
            self.streak = 0
        
        return self.streak
    
    def lose_life(self):
        """√âlet elveszt√©se (Survival m√≥d)"""
        if self.lives is not None:
            self.lives -= 1
            return self.lives > 0
        return True
    
    def get_remaining_time(self, start_time):
        """H√°tral√©v≈ë id≈ë (Timed m√≥d)"""
        if self.time_limit is None:
            return None
        
        elapsed = (datetime.now() - start_time).total_seconds()
        remaining = self.time_limit - elapsed
        return max(0, remaining)
    
    def is_time_up(self, start_time):
        """Id≈ë lej√°rt? (Timed m√≥d)"""
        if self.time_limit is None:
            return False
        
        return self.get_remaining_time(start_time) <= 0

class QuizModeUI:
    """Quiz m√≥dok UI komponensei"""
    
    @staticmethod
    def show_mode_selection():
        """M√≥d kiv√°laszt√°s megjelen√≠t√©se"""
        st.markdown("## üéÆ Quiz M√≥d Kiv√°laszt√°sa")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("### üìã M√≥dok")
            
            mode_options = {
                "norm√°l": {
                    "description": "Hagyom√°nyos quiz m√≥d",
                    "icon": "üìù",
                    "features": ["Nincs id≈ëkorl√°t", "Nincs √©letrendszer", "R√©szletes eredm√©nyek"]
                },
                "id≈ëz√≠tett": {
                    "description": "Id≈ëkorl√°tozott quiz",
                    "icon": "‚è±Ô∏è",
                    "features": ["30 m√°sodperc/k√©rd√©s", "Gyors v√°laszok", "Id≈ë nyom√°s"]
                },
                "t√∫l√©l√©s": {
                    "description": "T√∫l√©l√©si m√≥d",
                    "icon": "üíÄ",
                    "features": ["3 √©let", "Hib√°k ut√°n √©let elveszt√©se", "Hossz√∫ sorozatok"]
                },
                "gyakorl√°s": {
                    "description": "Gyakorl√≥ m√≥d",
                    "icon": "üìö",
                    "features": ["Azonnali visszajelz√©s", "Magyar√°zatok", "Nincs pontsz√°m"]
                },
                "kih√≠v√°s": {
                    "description": "Kih√≠v√°s m√≥d",
                    "icon": "üèÜ",
                    "features": ["1 √©let", "20 m√°sodperc/k√©rd√©s", "Legmagasabb pontsz√°mok"]
                }
            }
            
            selected_mode = st.selectbox(
                "V√°lassz m√≥dot:",
                list(mode_options.keys()),
                format_func=lambda x: f"{mode_options[x]['icon']} {x}"
            )
            
            # M√≥d le√≠r√°sa
            if selected_mode in mode_options:
                mode_info = mode_options[selected_mode]
                st.markdown(f"**{mode_info['description']}**")
                st.markdown("**Jellemz≈ëk:**")
                for feature in mode_info['features']:
                    st.markdown(f"‚Ä¢ {feature}")
        
        with col2:
            st.markdown("### üéØ Neh√©zs√©gi Szint")
            
            difficulty_options = {
                "k√∂nny≈±": {
                    "description": "K√∂nny≈± - feleletv√°laszt√≥s + megold√°s",
                    "icon": "üü¢",
                    "multiplier": 0.5,
                    "features": ["Feleletv√°laszt√≥s k√©rd√©sek", "Megold√°s megjelen√≠t√©se", "Seg√≠ts√©g a jobb als√≥ sarokban"]
                },
                "k√∂zepes": {
                    "description": "K√∂zepes - feleletv√°laszt√≥s",
                    "icon": "üü°",
                    "multiplier": 1.0,
                    "features": ["Feleletv√°laszt√≥s k√©rd√©sek", "Nincs megold√°s", "Hagyom√°nyos quiz"]
                },
                "neh√©z": {
                    "description": "Neh√©z - szabad sz√∂veges bevitel",
                    "icon": "üî¥",
                    "multiplier": 1.5,
                    "features": ["Sz√∂veges bevitel", "Pontos v√°lasz sz√ºks√©ges", "Legnehezebb m√≥d"]
                }
            }
            
            selected_difficulty = st.selectbox(
                "V√°lassz neh√©zs√©gi szintet:",
                list(difficulty_options.keys()),
                format_func=lambda x: f"{difficulty_options[x]['icon']} {x}"
            )
            
            # Neh√©zs√©g le√≠r√°sa
            if selected_difficulty in difficulty_options:
                difficulty_info = difficulty_options[selected_difficulty]
                st.markdown(f"**{difficulty_info['description']}**")
                st.markdown("**Jellemz≈ëk:**")
                for feature in difficulty_info['features']:
                    st.markdown(f"‚Ä¢ {feature}")
                st.markdown(f"**Pontsz√°m szorz√≥:** {difficulty_info['multiplier']}x")
        
        # Visszaadjuk a kiv√°lasztott √©rt√©keket
        return selected_mode, selected_difficulty
        return selected_mode, selected_difficulty
    
    @staticmethod
    def show_mode_info(mode_manager: QuizModeManager):
        """Aktu√°lis m√≥d inform√°ci√≥k megjelen√≠t√©se"""
        config = mode_manager.get_mode_config()
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            mode_name = config["mode"].title()
            st.metric("M√≥d", mode_name)
        
        with col2:
            difficulty_name = config["difficulty"].title()
            st.metric("Neh√©zs√©g", difficulty_name)
        
        with col3:
            if config["lives"] is not None:
                st.metric("√âletek", config["lives"])
            else:
                st.metric("√âletek", "‚àû")
        
        with col4:
            st.metric("Streak", config["streak"])
    
    @staticmethod
    def show_timer(start_time, time_limit):
        """Id≈ëz√≠t≈ë megjelen√≠t√©se"""
        if time_limit is None:
            return
        
        remaining = time_limit - (datetime.now() - start_time).total_seconds()
        remaining = max(0, remaining)
        
        # Progress bar
        progress = remaining / time_limit
        st.progress(progress)
        
        # Id≈ë kijelz√©se
        minutes = int(remaining // 60)
        seconds = int(remaining % 60)
        st.markdown(f"**‚è±Ô∏è H√°tral√©v≈ë id≈ë: {minutes:02d}:{seconds:02d}**")
        
        return remaining <= 0

class QuizScoring:
    """Pontsz√°m√≠t√°s k√ºl√∂nb√∂z≈ë m√≥dokhoz"""
    
    @staticmethod
    def calculate_score(mode: QuizMode, difficulty: DifficultyLevel, 
                       correct_answers: int, total_questions: int, 
                       time_taken: float, streak: int, lives_remaining: int = None):
        """Pontsz√°m kisz√°m√≠t√°sa"""
        
        # Alap pontsz√°m - elker√ºlj√ºk a null√°val val√≥ oszt√°st
        if total_questions == 0:
            base_score = 0
        else:
            base_score = (correct_answers / total_questions) * 100
        
        # Neh√©zs√©gi szorz√≥
        difficulty_multipliers = {
            DifficultyLevel.EASY: 0.5,
            DifficultyLevel.MEDIUM: 1.0,
            DifficultyLevel.HARD: 1.5
        }
        
        multiplier = difficulty_multipliers.get(difficulty, 1.0)
        
        # M√≥d-specifikus b√≥nuszok
        mode_bonus = 0
        
        if mode == QuizMode.TIMED:
            # Id≈ë b√≥nusz (gyorsabb = t√∂bb pont)
            time_bonus = max(0, (30 - time_taken) * 2)
            mode_bonus += time_bonus
        
        elif mode == QuizMode.SURVIVAL:
            # √âlet b√≥nusz
            if lives_remaining is not None:
                life_bonus = lives_remaining * 10
                mode_bonus += life_bonus
        
        elif mode == QuizMode.CHALLENGE:
            # Kih√≠v√°s b√≥nusz (id≈ë + √©let)
            time_bonus = max(0, (20 - time_taken) * 3)
            life_bonus = (lives_remaining or 0) * 20
            mode_bonus += time_bonus + life_bonus
        
        # Streak b√≥nusz
        streak_bonus = streak * 2
        
        # V√©gs≈ë pontsz√°m
        final_score = (base_score + mode_bonus + streak_bonus) * multiplier
        
        return {
            "base_score": round(base_score, 2),
            "difficulty_multiplier": multiplier,
            "mode_bonus": round(mode_bonus, 2),
            "streak_bonus": round(streak_bonus, 2),
            "final_score": round(final_score, 2)
        }

if __name__ == "__main__":
    # Test the quiz modes
    manager = QuizModeManager()
    manager.set_mode(QuizMode.TIMED, time_limit=30)
    manager.set_difficulty(DifficultyLevel.HARD)
    
    print("Quiz modes module loaded successfully!")
    print(f"Current mode: {manager.current_mode.value}")
    print(f"Current difficulty: {manager.current_difficulty.value}") 